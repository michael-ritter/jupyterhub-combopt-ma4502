{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the JupyterHub Deployment Docs for Combinatorial Optimization 2019-S This documentation serves as a record of the JupyterHub Deployment for MA4502 Combinatorial Optimization Summer 2019 at Technische Universit\u00e4t M\u00fcnchen. It is based on the GitHub repository for a similar installation of Peter D. Kazarinoff for Portland Community College. The GitHub repo for the deployment can be found here: https://github.com/michael-ritter/jupyterhub-combopt-ma4502.git Click the menu items on the left to view the deployment steps. Or start Here and click the arrows at the bottom of each page. Main Steps Generate SSH keys Request virtual machine with non-root sudo user Install JupyterHub and Python packages Aquire SSL cert Create Cookie Secret, Proxy Auth Token, and dhparam.pem Install and configure Nginx Configure JupyterHub JupyterHub as system service optional: Gitlab Authentication Pull assignments down from GitHub for each user Extra configuration","title":"Home"},{"location":"#welcome-to-the-jupyterhub-deployment-docs-for-combinatorial-optimization-2019-s","text":"This documentation serves as a record of the JupyterHub Deployment for MA4502 Combinatorial Optimization Summer 2019 at Technische Universit\u00e4t M\u00fcnchen. It is based on the GitHub repository for a similar installation of Peter D. Kazarinoff for Portland Community College. The GitHub repo for the deployment can be found here: https://github.com/michael-ritter/jupyterhub-combopt-ma4502.git Click the menu items on the left to view the deployment steps. Or start Here and click the arrows at the bottom of each page.","title":"Welcome to the JupyterHub Deployment Docs for Combinatorial Optimization 2019-S"},{"location":"#main-steps","text":"Generate SSH keys Request virtual machine with non-root sudo user Install JupyterHub and Python packages Aquire SSL cert Create Cookie Secret, Proxy Auth Token, and dhparam.pem Install and configure Nginx Configure JupyterHub JupyterHub as system service optional: Gitlab Authentication Pull assignments down from GitHub for each user Extra configuration","title":"Main Steps"},{"location":"add_users/","text":"Add Users We have Nginx and JupyterHub running as system services. We can log into JupyterHub as the non-root sudo user ritter , the user we created when we first setup the server. In this section, we will add an additional user to the server and see if we can log in as that user. If you have a very small class or small lab, this may be all the users you need to register. Add Users Create a new user Add the new user to the jupyterhub_config.py file Log to JupyterHub in as the new user Summary Next Steps Adding new users to JupyterHub can be accomplished in a couple of different ways. Users can be added manually to the server from the command line, users can be added in JupyterHub with the Admin dashboard, and users can be added automatically when a user authenticates with a service like GitHub or Google. In this section, we are going to add users to the server manually. We will create a new user on the server and then log into JupyterHub as the new user. Open PuTTY and log into the server. Just to make sure, update the system before proceeding. $ sudo apt-get update $ sudo apt-get upgrade Shutdown JupyterHub and Nginx, then restart both of them. Let's make sure our system service functionality works correctly. $ sudo systemctl stop jupyterhub $ sudo systemctl stop nginx $ sudo systemctl start nginx $ sudo systemctl status nginx # check if active [Ctrl]+[c] to exit $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # check if active [Ctrl]+[c] to exit Point a web browser at our domain and log into JupyterHub as our non-root sudo user ritter . Use the password we set for ritter on the server. The JupyterHub login screen is shown below: You should see a couple files in the Jupyter notebook file browser. These are the same files that are in the non-root sudo user's ( ritter ) home directory. At the Jupyter notebook file browser, choose [New] \u2192 [Python 3] Try writing a bit of Python code and running it. Imports for numpy and matplotlib should work normally. After messing around with a Jupyter notebook and making sure that imports and plots work correctly, shut down your notebook server. This action does not shut down the virtual machine / server running JupyterHub, it just shuts down the server (running on the virtual machine / server) that serves Jupyter notebooks for the user you logged in as. Click the [Control Pannel] button in the upper right-hand corner of the Jupyter notebook. This brings you to a web browser screen that shows buttons for [Stop My Server] and [My Server] and [Logout]. Click the [Stop My Server] button. Finally, logout by clicking the [Log Out] button in the upper right. This brings you back to the JupyterHub Sign in screen. The reason we want to log out is that we are going to create a new user and want to login as that user. If you don't log out, JupyterHub may start you as the user ritter . Create a new user If you have a small class or a small lab, creating users one at a time at the command line and assigning them passwords might be all you need to do to get JupyterHub working for your small group. Next, we will create a new user on the server and log in as the new user. For a small group, you could repeat this process a couple times, and send out usernames and passwords to people in your group. On the server, create the new user with the adduser command. I called my new user viviana . $ sudo adduser viviana Set a new password and confirm: Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully The user details can be skipped by pressing [Enter]. Then [Y] to complete the new user setup. Changing the user information for username Enter the new value, or press ENTER for the default Full Name []: Room Number []: Work Phone []: Home Phone []: Other []: Is the information correct? [Y/n] Add the new user to the jupyterhub_config.py file Now we need to add the new user to the jupyterhub_config.py file. So far the only users we have specified in the file is ritter . Open up the jupyterhub_config.py file and edit the lines shown below. $ nano /etc/jupyterhub/jupyterhub_config.py Add the user 'viviana' to c.Authenticator.whitelist = { } # /etc/jupyterhub/jupyterhub_config.py ... # Users c.Authenticator.whitelist = {'ritter','viviana'} c.Authenticator.admin_users = {'ritter'} ... Save and close the file with [Ctrl]+[x] and [y]. Now restart Jupyterhub to make the changes take effect. $ sudo systemctl stop jupyterhub $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit Log to JupyterHub in as the new user Now browse to the domain name we set up before and log into JupyterHub as the new user viviana . Note the new user viviana doesn't have any files in their Jupyter notebook file browser. This is because the home directory of the user viviana is empty. If you create a new notebook, that notebook will be saved in the viviana home directory. Make sure to stop the server and logout as we did before by clicking [Control Panel] in the upper right and selecting [Stop My Server] and [Logout]. Summary In this section, we tested our JupyterHub deployment and added a new user to the server. After the new user was created, we added the new user to the jupyterhub_config.py file. Then we restarted JupyterHub and logged in as our new user. Next Steps The next step is to add OAuth authentication via GitLab. This will allow students to log into our JupyterHub server with GitLab usernames and passwords.","title":"Add Users"},{"location":"add_users/#add-users","text":"We have Nginx and JupyterHub running as system services. We can log into JupyterHub as the non-root sudo user ritter , the user we created when we first setup the server. In this section, we will add an additional user to the server and see if we can log in as that user. If you have a very small class or small lab, this may be all the users you need to register. Add Users Create a new user Add the new user to the jupyterhub_config.py file Log to JupyterHub in as the new user Summary Next Steps Adding new users to JupyterHub can be accomplished in a couple of different ways. Users can be added manually to the server from the command line, users can be added in JupyterHub with the Admin dashboard, and users can be added automatically when a user authenticates with a service like GitHub or Google. In this section, we are going to add users to the server manually. We will create a new user on the server and then log into JupyterHub as the new user. Open PuTTY and log into the server. Just to make sure, update the system before proceeding. $ sudo apt-get update $ sudo apt-get upgrade Shutdown JupyterHub and Nginx, then restart both of them. Let's make sure our system service functionality works correctly. $ sudo systemctl stop jupyterhub $ sudo systemctl stop nginx $ sudo systemctl start nginx $ sudo systemctl status nginx # check if active [Ctrl]+[c] to exit $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # check if active [Ctrl]+[c] to exit Point a web browser at our domain and log into JupyterHub as our non-root sudo user ritter . Use the password we set for ritter on the server. The JupyterHub login screen is shown below: You should see a couple files in the Jupyter notebook file browser. These are the same files that are in the non-root sudo user's ( ritter ) home directory. At the Jupyter notebook file browser, choose [New] \u2192 [Python 3] Try writing a bit of Python code and running it. Imports for numpy and matplotlib should work normally. After messing around with a Jupyter notebook and making sure that imports and plots work correctly, shut down your notebook server. This action does not shut down the virtual machine / server running JupyterHub, it just shuts down the server (running on the virtual machine / server) that serves Jupyter notebooks for the user you logged in as. Click the [Control Pannel] button in the upper right-hand corner of the Jupyter notebook. This brings you to a web browser screen that shows buttons for [Stop My Server] and [My Server] and [Logout]. Click the [Stop My Server] button. Finally, logout by clicking the [Log Out] button in the upper right. This brings you back to the JupyterHub Sign in screen. The reason we want to log out is that we are going to create a new user and want to login as that user. If you don't log out, JupyterHub may start you as the user ritter .","title":"Add Users"},{"location":"add_users/#create-a-new-user","text":"If you have a small class or a small lab, creating users one at a time at the command line and assigning them passwords might be all you need to do to get JupyterHub working for your small group. Next, we will create a new user on the server and log in as the new user. For a small group, you could repeat this process a couple times, and send out usernames and passwords to people in your group. On the server, create the new user with the adduser command. I called my new user viviana . $ sudo adduser viviana Set a new password and confirm: Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully The user details can be skipped by pressing [Enter]. Then [Y] to complete the new user setup. Changing the user information for username Enter the new value, or press ENTER for the default Full Name []: Room Number []: Work Phone []: Home Phone []: Other []: Is the information correct? [Y/n]","title":"Create a new user"},{"location":"add_users/#add-the-new-user-to-the-jupyterhub_configpy-file","text":"Now we need to add the new user to the jupyterhub_config.py file. So far the only users we have specified in the file is ritter . Open up the jupyterhub_config.py file and edit the lines shown below. $ nano /etc/jupyterhub/jupyterhub_config.py Add the user 'viviana' to c.Authenticator.whitelist = { } # /etc/jupyterhub/jupyterhub_config.py ... # Users c.Authenticator.whitelist = {'ritter','viviana'} c.Authenticator.admin_users = {'ritter'} ... Save and close the file with [Ctrl]+[x] and [y]. Now restart Jupyterhub to make the changes take effect. $ sudo systemctl stop jupyterhub $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit","title":"Add the new user to the jupyterhub_config.py file"},{"location":"add_users/#log-to-jupyterhub-in-as-the-new-user","text":"Now browse to the domain name we set up before and log into JupyterHub as the new user viviana . Note the new user viviana doesn't have any files in their Jupyter notebook file browser. This is because the home directory of the user viviana is empty. If you create a new notebook, that notebook will be saved in the viviana home directory. Make sure to stop the server and logout as we did before by clicking [Control Panel] in the upper right and selecting [Stop My Server] and [Logout].","title":"Log to JupyterHub in as the new user"},{"location":"add_users/#summary","text":"In this section, we tested our JupyterHub deployment and added a new user to the server. After the new user was created, we added the new user to the jupyterhub_config.py file. Then we restarted JupyterHub and logged in as our new user.","title":"Summary"},{"location":"add_users/#next-steps","text":"The next step is to add OAuth authentication via GitLab. This will allow students to log into our JupyterHub server with GitLab usernames and passwords.","title":"Next Steps"},{"location":"assignments_on_github/","text":"Assignments on GitHub Now we'll build a set of pre-constructed assignments and notes for each JupyterHub user. We'll save these assignments and notes to a GitHub repo. Assignments on GitHub Create a repo of assignments on GitHub.com Pull the repo down from GitHub.com to the local computer Create the assignments and notes Push the completed assignments and notes up to GiHub Summary Next Steps Create a repo of assignments on GitHub.com Log onto to GitHub.com, and create a new repo with the notes and assignments for the course. Make sure to select [Add .gitignore Python ] and select a license. Pull the repo down from GitHub.com to the local computer On a local computer, not the server, clone the GitHub repo. This allows us to work on the notes and assignments locally. # local computer $ git clone https://github.com/username/reponame.git Create the assignments and notes On the local computer, not the server, build the assignment and notes for the semester. I did this using Jupyter notebooks. Save all of the changes locally. Add any files that you don't want students to see to .gitignore. Good templates for .gitignore are available over at gitignore.io . Push the completed assignments and notes up to GiHub Finally, add, commit, and push the changes up to GitHub. # local computer $ git add . $ commit -m \"added assignments and notes\" $ git push origin master Summary In this section, we built a set of notes and assignments for the semester on GitHub. First a new repo was created on GitHub.com. A .gitignore file corresponding to Python and a license were added to the repo when the repo was created. Next we pulled to repo down to our local computer and built the assignments and notes. Finally we pushed the changes up to Github. Next Steps Next, we'll use a JupyterHub extension called nbgitpuller which copies the notes and assignments we just saved to GitHub into each students home folder when they log into JupyterHub.","title":"Assignments on GitHub"},{"location":"assignments_on_github/#assignments-on-github","text":"Now we'll build a set of pre-constructed assignments and notes for each JupyterHub user. We'll save these assignments and notes to a GitHub repo. Assignments on GitHub Create a repo of assignments on GitHub.com Pull the repo down from GitHub.com to the local computer Create the assignments and notes Push the completed assignments and notes up to GiHub Summary Next Steps","title":"Assignments on GitHub"},{"location":"assignments_on_github/#create-a-repo-of-assignments-on-githubcom","text":"Log onto to GitHub.com, and create a new repo with the notes and assignments for the course. Make sure to select [Add .gitignore Python ] and select a license.","title":"Create a repo of assignments on GitHub.com"},{"location":"assignments_on_github/#pull-the-repo-down-from-githubcom-to-the-local-computer","text":"On a local computer, not the server, clone the GitHub repo. This allows us to work on the notes and assignments locally. # local computer $ git clone https://github.com/username/reponame.git","title":"Pull the repo down from GitHub.com to the local computer"},{"location":"assignments_on_github/#create-the-assignments-and-notes","text":"On the local computer, not the server, build the assignment and notes for the semester. I did this using Jupyter notebooks. Save all of the changes locally. Add any files that you don't want students to see to .gitignore. Good templates for .gitignore are available over at gitignore.io .","title":"Create the assignments and notes"},{"location":"assignments_on_github/#push-the-completed-assignments-and-notes-up-to-gihub","text":"Finally, add, commit, and push the changes up to GitHub. # local computer $ git add . $ commit -m \"added assignments and notes\" $ git push origin master","title":"Push the completed assignments and notes up to GiHub"},{"location":"assignments_on_github/#summary","text":"In this section, we built a set of notes and assignments for the semester on GitHub. First a new repo was created on GitHub.com. A .gitignore file corresponding to Python and a license were added to the repo when the repo was created. Next we pulled to repo down to our local computer and built the assignments and notes. Finally we pushed the changes up to Github.","title":"Summary"},{"location":"assignments_on_github/#next-steps","text":"Next, we'll use a JupyterHub extension called nbgitpuller which copies the notes and assignments we just saved to GitHub into each students home folder when they log into JupyterHub.","title":"Next Steps"},{"location":"building_docs/","text":"Building Docs The documentation for this JupyterHub deployment was completed using mkdocs , the mkdocs-material theme and deployed on GitHub pages. The directory structure of the GitHub repo that houses the deployment files and docs looks like this: . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 mkdocs.yml \u2502 \u2514\u2500\u2500 theme \u251c\u2500\u2500 etc \u2502 \u251c\u2500\u2500 jupyterhub \u2502 \u251c\u2500\u2500 nginx \u2502 \u2514\u2500\u2500 systemd \u2514\u2500\u2500 opt \u2514\u2500\u2500 miniconda3 Inside the docs/ directory is another docs/ subdirectory with all of markdown files that make up the documentation. There is also a mkdocs yaml file in the docs/ directory. When calling mkdocs commands from the command line, you need to be in the folder with the mkdocs.yml file. ./docs/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u251c\u2500\u2500 add_users.md \u2502 \u251c\u2500\u2500 assignments_on_github.md \u2502 \u251c\u2500\u2500 building_docs.md \u2502 \u251c\u2500\u2500 cookie_secret_proxy_auth_token.md \u2502 \u251c\u2500\u2500 custom_login_page.md \u2502 \u251c\u2500\u2500 dns_routing.md \u2502 \u251c\u2500\u2500 extra_configuration.md \u2502 \u251c\u2500\u2500 google_oauth.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 install_jupyterhub.md \u2502 \u251c\u2500\u2500 jupyterhub_config.md \u2502 \u251c\u2500\u2500 nbgitpuller_defaut_url.md \u2502 \u251c\u2500\u2500 nbgitpuller_plugin.md \u2502 \u251c\u2500\u2500 nginx_config.md \u2502 \u251c\u2500\u2500 nginx_install.md \u2502 \u251c\u2500\u2500 periodic_maintenance.md \u2502 \u251c\u2500\u2500 server_setup.md \u2502 \u251c\u2500\u2500 setup_and_tools.md \u2502 \u251c\u2500\u2500 slides \u2502 \u251c\u2500\u2500 ssh_keys.md \u2502 \u251c\u2500\u2500 ssl_cirtificates.md \u2502 \u251c\u2500\u2500 static \u2502 \u251c\u2500\u2500 systemd.md \u2502 \u251c\u2500\u2500 useful_commands.md \u2502 \u2514\u2500\u2500 what_is_jupyterhub.md \u2514\u2500\u2500 theme \u251c\u2500\u2500 assets \u2514\u2500\u2500 partials To build the docs locally, make sure you have Python installed. Start out by cloning the repo: git clone https://github.com/michael-ritter/jupyterhub-combopt-ma4502.git cd into the cloned repo, and create a virtual environment. Install the Python packages needed to build the docs. cd jupyterhub-combopt-ma4502 python3 -m venv venv source venv/bin/activate (venv) pip install -r requirements.txt cd into the docs dir, and run mkdocs build and mkdocs serve cd docs ls # mkdocs.yml mkdocs build mkdocs serve Look at the built site on local host: http://localhost:8000/ Deploy to GitHub pages mkdocs gh-deploy","title":"Building the Docs"},{"location":"building_docs/#building-docs","text":"The documentation for this JupyterHub deployment was completed using mkdocs , the mkdocs-material theme and deployed on GitHub pages. The directory structure of the GitHub repo that houses the deployment files and docs looks like this: . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 mkdocs.yml \u2502 \u2514\u2500\u2500 theme \u251c\u2500\u2500 etc \u2502 \u251c\u2500\u2500 jupyterhub \u2502 \u251c\u2500\u2500 nginx \u2502 \u2514\u2500\u2500 systemd \u2514\u2500\u2500 opt \u2514\u2500\u2500 miniconda3 Inside the docs/ directory is another docs/ subdirectory with all of markdown files that make up the documentation. There is also a mkdocs yaml file in the docs/ directory. When calling mkdocs commands from the command line, you need to be in the folder with the mkdocs.yml file. ./docs/ \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u251c\u2500\u2500 add_users.md \u2502 \u251c\u2500\u2500 assignments_on_github.md \u2502 \u251c\u2500\u2500 building_docs.md \u2502 \u251c\u2500\u2500 cookie_secret_proxy_auth_token.md \u2502 \u251c\u2500\u2500 custom_login_page.md \u2502 \u251c\u2500\u2500 dns_routing.md \u2502 \u251c\u2500\u2500 extra_configuration.md \u2502 \u251c\u2500\u2500 google_oauth.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 install_jupyterhub.md \u2502 \u251c\u2500\u2500 jupyterhub_config.md \u2502 \u251c\u2500\u2500 nbgitpuller_defaut_url.md \u2502 \u251c\u2500\u2500 nbgitpuller_plugin.md \u2502 \u251c\u2500\u2500 nginx_config.md \u2502 \u251c\u2500\u2500 nginx_install.md \u2502 \u251c\u2500\u2500 periodic_maintenance.md \u2502 \u251c\u2500\u2500 server_setup.md \u2502 \u251c\u2500\u2500 setup_and_tools.md \u2502 \u251c\u2500\u2500 slides \u2502 \u251c\u2500\u2500 ssh_keys.md \u2502 \u251c\u2500\u2500 ssl_cirtificates.md \u2502 \u251c\u2500\u2500 static \u2502 \u251c\u2500\u2500 systemd.md \u2502 \u251c\u2500\u2500 useful_commands.md \u2502 \u2514\u2500\u2500 what_is_jupyterhub.md \u2514\u2500\u2500 theme \u251c\u2500\u2500 assets \u2514\u2500\u2500 partials To build the docs locally, make sure you have Python installed. Start out by cloning the repo: git clone https://github.com/michael-ritter/jupyterhub-combopt-ma4502.git cd into the cloned repo, and create a virtual environment. Install the Python packages needed to build the docs. cd jupyterhub-combopt-ma4502 python3 -m venv venv source venv/bin/activate (venv) pip install -r requirements.txt cd into the docs dir, and run mkdocs build and mkdocs serve cd docs ls # mkdocs.yml mkdocs build mkdocs serve Look at the built site on local host: http://localhost:8000/ Deploy to GitHub pages mkdocs gh-deploy","title":"Building Docs"},{"location":"cookie_secret_proxy_auth_token/","text":"Create a Cookie Secret and Proxy Auth Token In addition to an SSL certificate, the Jupyter Hub docs on security basics specify that a cookie secret and proxy auth token be created. Create a Cookie Secret and Proxy Auth Token Create a Cookie Secret Create Proxy Auth Token Create dhparam.pem Summary Next Steps Create a Cookie Secret According to the JupyterHub docs, the cookie secret file should be saved in the /srv/jupyterhub directory. cd into the /srv directory and mkdir a new jupyterhub subdirectory. Note you need to use sudo to create a subdirectory in /srv . $ cd /srv $ sudo mkdir jupyterhub $ cd jupyterhub Next use touch to create the jupyterhub_cookie_secret file. Write to the file using openssl . Change the final file permissions to 600 as noted in the JupyterHub docs. $ pwd /srv/jupyterhub $ sudo touch jupyterhub_cookie_secret $ sudo chown :sudo jupyterhub_cookie_secret $ sudo chmod g+rw jupyterhub_cookie_secret $ sudo openssl rand -hex 32 > jupyterhub_cookie_secret $ sudo chown root jupyterhub_cookie_secret $ sudo chmod 600 jupyterhub_cookie_secret $ls -la -rw------- 1 root sudo 65 Feb 6 20:37 jupyterhub_cookie_secret I had trouble with the cookie secret file because I missed where the jupyterhub docs show: The file must not be readable by group or other or the server won\u2019t start. The recommended permissions for the cookie secret file are 600 (owner-only rw). After you create the cookie secret file, note of the file's location. We'll add the jupyterhub_cookie_secret file location to our JupyterHub configuration. Create Proxy Auth Token To generate the proxy auth token, use the same set of commands used to create the cookie secret, except point to a different file called proxy_auth_token . $ pwd /srv/jupyterhub $ sudo touch proxy_auth_token $ sudo chown :sudo proxy_auth_token $ sudo chmod g+rw proxy_auth_token $ sudo openssl rand -hex 32 > proxy_auth_token $ sudo chown root proxy_auth_token $ sudo chmod 600 proxy_auth_token $ls -la -rw------- 1 root sudo 65 Feb 6 20:37 jupyterhub_cookie_secret -rw------- 1 root sudo 65 Feb 6 20:37 proxy_auth_token Now, when we list the contents of ~/srv/jupyterhub we see: /srv/jupyterhub/ \u251c\u2500\u2500 jupyterhub_cookie_secret \u2514\u2500\u2500 proxy_auth_token Create dhparam.pem Let's also generate a dhparam.pem file. I'm still not exactly sure what the dhparam.pem file is, it has something to do with security. dhparam.pem will be incorporated into our Nginx config file later on. We'll use the same set of commands we used to create the cookie secret and proxy auth token. The part which is different is the openssl dhparam command that generates the `.pem file . It takes a minute or two for openssl to do it's work. Finally we modify the permissions again to 600 (owner-only rw). Note the location of the dhparam.pem file as we will add it to the Nginx config file. $ pwd /srv/jupyterhub $ sudo touch dhparam.pem $ sudo chown :sudo dhparam.pem $ sudo chmod g+rw dhparam.pem $ sudo openssl dhparam -out /srv/jupyterhub/dhparam.pem 2048 # wait a minute or two $ sudo chown root dhparam.pem $ sudo chmod 600 dhparam.pem $ ls -la -rw------- 1 root sudo 424 Feb 6 20:37 dhparam.pem -rw------- 1 root sudo 65 Feb 6 20:37 jupyterhub_cookie_secret -rw------- 1 root sudo 65 Feb 6 20:37 proxy_auth_token We now have three files in the /srv/jupyterhub/ directory. The jupyterhub_cookie_secret and proxy_auth_token will be referenced in the jupyterhub_config.py file. The dhparam.pem file will be referenced in the nginx.conf file. /srv/jupyterhub/ \u251c\u2500\u2500 dhparam.pem \u251c\u2500\u2500 jupyterhub_cookie_secret \u2514\u2500\u2500 proxy_auth_token Summary In this section, we created a jupyterhub directory inside /srv . Inside that directory we created three files using the openssl utility: jupyterhub_cookie_secret proxy_auth_token dhparam.pem Each of these three files have their permissions set to 600 . Next Steps The next step is to complete the configuration of Nginx on the server.","title":"Cookie Secret and Proxy Auth Token"},{"location":"cookie_secret_proxy_auth_token/#create-a-cookie-secret-and-proxy-auth-token","text":"In addition to an SSL certificate, the Jupyter Hub docs on security basics specify that a cookie secret and proxy auth token be created. Create a Cookie Secret and Proxy Auth Token Create a Cookie Secret Create Proxy Auth Token Create dhparam.pem Summary Next Steps","title":"Create a Cookie Secret and Proxy Auth Token"},{"location":"cookie_secret_proxy_auth_token/#create-a-cookie-secret","text":"According to the JupyterHub docs, the cookie secret file should be saved in the /srv/jupyterhub directory. cd into the /srv directory and mkdir a new jupyterhub subdirectory. Note you need to use sudo to create a subdirectory in /srv . $ cd /srv $ sudo mkdir jupyterhub $ cd jupyterhub Next use touch to create the jupyterhub_cookie_secret file. Write to the file using openssl . Change the final file permissions to 600 as noted in the JupyterHub docs. $ pwd /srv/jupyterhub $ sudo touch jupyterhub_cookie_secret $ sudo chown :sudo jupyterhub_cookie_secret $ sudo chmod g+rw jupyterhub_cookie_secret $ sudo openssl rand -hex 32 > jupyterhub_cookie_secret $ sudo chown root jupyterhub_cookie_secret $ sudo chmod 600 jupyterhub_cookie_secret $ls -la -rw------- 1 root sudo 65 Feb 6 20:37 jupyterhub_cookie_secret I had trouble with the cookie secret file because I missed where the jupyterhub docs show: The file must not be readable by group or other or the server won\u2019t start. The recommended permissions for the cookie secret file are 600 (owner-only rw). After you create the cookie secret file, note of the file's location. We'll add the jupyterhub_cookie_secret file location to our JupyterHub configuration.","title":"Create a Cookie Secret"},{"location":"cookie_secret_proxy_auth_token/#create-proxy-auth-token","text":"To generate the proxy auth token, use the same set of commands used to create the cookie secret, except point to a different file called proxy_auth_token . $ pwd /srv/jupyterhub $ sudo touch proxy_auth_token $ sudo chown :sudo proxy_auth_token $ sudo chmod g+rw proxy_auth_token $ sudo openssl rand -hex 32 > proxy_auth_token $ sudo chown root proxy_auth_token $ sudo chmod 600 proxy_auth_token $ls -la -rw------- 1 root sudo 65 Feb 6 20:37 jupyterhub_cookie_secret -rw------- 1 root sudo 65 Feb 6 20:37 proxy_auth_token Now, when we list the contents of ~/srv/jupyterhub we see: /srv/jupyterhub/ \u251c\u2500\u2500 jupyterhub_cookie_secret \u2514\u2500\u2500 proxy_auth_token","title":"Create Proxy Auth Token"},{"location":"cookie_secret_proxy_auth_token/#create-dhparampem","text":"Let's also generate a dhparam.pem file. I'm still not exactly sure what the dhparam.pem file is, it has something to do with security. dhparam.pem will be incorporated into our Nginx config file later on. We'll use the same set of commands we used to create the cookie secret and proxy auth token. The part which is different is the openssl dhparam command that generates the `.pem file . It takes a minute or two for openssl to do it's work. Finally we modify the permissions again to 600 (owner-only rw). Note the location of the dhparam.pem file as we will add it to the Nginx config file. $ pwd /srv/jupyterhub $ sudo touch dhparam.pem $ sudo chown :sudo dhparam.pem $ sudo chmod g+rw dhparam.pem $ sudo openssl dhparam -out /srv/jupyterhub/dhparam.pem 2048 # wait a minute or two $ sudo chown root dhparam.pem $ sudo chmod 600 dhparam.pem $ ls -la -rw------- 1 root sudo 424 Feb 6 20:37 dhparam.pem -rw------- 1 root sudo 65 Feb 6 20:37 jupyterhub_cookie_secret -rw------- 1 root sudo 65 Feb 6 20:37 proxy_auth_token We now have three files in the /srv/jupyterhub/ directory. The jupyterhub_cookie_secret and proxy_auth_token will be referenced in the jupyterhub_config.py file. The dhparam.pem file will be referenced in the nginx.conf file. /srv/jupyterhub/ \u251c\u2500\u2500 dhparam.pem \u251c\u2500\u2500 jupyterhub_cookie_secret \u2514\u2500\u2500 proxy_auth_token","title":"Create dhparam.pem"},{"location":"cookie_secret_proxy_auth_token/#summary","text":"In this section, we created a jupyterhub directory inside /srv . Inside that directory we created three files using the openssl utility: jupyterhub_cookie_secret proxy_auth_token dhparam.pem Each of these three files have their permissions set to 600 .","title":"Summary"},{"location":"cookie_secret_proxy_auth_token/#next-steps","text":"The next step is to complete the configuration of Nginx on the server.","title":"Next Steps"},{"location":"draw_dot_IO_extension/","text":"Draw.IO Extension In my ENGR114 class, students learn how to construct flow charts that describe the way a program runs. Students also use flowcharts to plan how a program will run. We can provide students access to a flow chart drawing program right in JupyterHub called Draw.IO . Draw.IO can be added to our JuptyerHub deployment as a JupyterLab extension. Draw.IO Extension Install nodejs Install Draw.IO extension for JupyterLub Restart JupyterHub and test it out Summary Install nodejs Ensure that nodejs is installed in the (jupyterhub) virtual environment. Nodejs is needed to install the Draw.IO JupyterLab extension. $ sudo systemctl stop jupyterhub $ conda activate jupyterhub (jupyterhub)$ conda install -c conda-forge nodejs Install Draw.IO extension for JupyterLub Type another conda install line to install the Draw.IO extension for JupyterLab. (jupyterhub)$ jupyter labextension install jupyterlab-drawio Restart JupyterHub and test it out $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub [Ctrl]+[c] to exit Below are some screen captures of the Draw.io extension in action. Students need to click the [Diagram] icon in the JupyterLab [Launcher] window to open a new Draw.IO drawing. Summary Draw.io is a drawing program students can use to create flow charts. Draw.io can be installed as a JupyterLab extension in our JupyterHub deployment. To install Draw.io into JupyterHub, first install nodejs and then install the Draw.io extension.","title":"Draw.IO extension"},{"location":"draw_dot_IO_extension/#drawio-extension","text":"In my ENGR114 class, students learn how to construct flow charts that describe the way a program runs. Students also use flowcharts to plan how a program will run. We can provide students access to a flow chart drawing program right in JupyterHub called Draw.IO . Draw.IO can be added to our JuptyerHub deployment as a JupyterLab extension. Draw.IO Extension Install nodejs Install Draw.IO extension for JupyterLub Restart JupyterHub and test it out Summary","title":"Draw.IO Extension"},{"location":"draw_dot_IO_extension/#install-nodejs","text":"Ensure that nodejs is installed in the (jupyterhub) virtual environment. Nodejs is needed to install the Draw.IO JupyterLab extension. $ sudo systemctl stop jupyterhub $ conda activate jupyterhub (jupyterhub)$ conda install -c conda-forge nodejs","title":"Install nodejs"},{"location":"draw_dot_IO_extension/#install-drawio-extension-for-jupyterlub","text":"Type another conda install line to install the Draw.IO extension for JupyterLab. (jupyterhub)$ jupyter labextension install jupyterlab-drawio","title":"Install Draw.IO extension for JupyterLub"},{"location":"draw_dot_IO_extension/#restart-jupyterhub-and-test-it-out","text":"$ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub [Ctrl]+[c] to exit Below are some screen captures of the Draw.io extension in action. Students need to click the [Diagram] icon in the JupyterLab [Launcher] window to open a new Draw.IO drawing.","title":"Restart JupyterHub and test it out"},{"location":"draw_dot_IO_extension/#summary","text":"Draw.io is a drawing program students can use to create flow charts. Draw.io can be installed as a JupyterLab extension in our JupyterHub deployment. To install Draw.io into JupyterHub, first install nodejs and then install the Draw.io extension.","title":"Summary"},{"location":"extra_configuration/","text":"Extra Configuration In this section, we will go over some extra configuration settings we can set in jupyterhub_config.py to help our JupyterHub deployment hum along and help if students forget to logout or too many student try and log in at the same time. Extra Configuration Configuration Options Cull Idle Servers Modify jupyterhub_config.py and upload to server Summary Additional Extras Configuration Options In the JupyterHub docs, there is a list of configuration options and descriptions: https://jupyterhub.readthedocs.io/en/stable/api/app.html A couple configuration options in the list seem like good ideas: The class has about 40 students, plus one instructor. Given that class size, I think 100 is a good number for the maximum that can use JupyterHub the same time. The following settings can be configured in /etc/jupyterhub/jupyterhub_config.py : # Maximum number of concurrent servers that can be active at a time. c.JupyterHub.active_server_limit = 100 Having too many users log in all at the same time can overload the server. Let's set this as 20, so half of the class can log in at the same time. # Maximum number of concurrent users that can be spawning at a time. c.JupyterHub.concurrent_spawn_limit = 20 A couple settings relate to shutting down the hub and if user servers shut down too. I want it set so that if I shut down the hub, all the user servers are shut down too. # Whether to shutdown the proxy when the Hub shuts down. c.JupyterHub.cleanup_proxy = True # Whether to shutdown single-user servers when the Hub shuts down. c.JupyterHub.cleanup_servers = True Cull Idle Servers A problem with JupyterHub deployments might be that some students would not shut down their server when they were done working. Then fourty or so servers would all keep running all the time. The following is kept as a reference, I did not implement it this time: This script from the JupyterHub Examples repo looks like it might help: https://github.com/jupyterhub/jupyterhub/tree/master/examples/cull-idle To get the cull_idle_servers.py script to run as a JupyterHub service, it looks like you need to add the following to jupyterhub_config.py . (Based on this page in the JupyterHub docs) # /etc/jupyterhub/jupyterhub_config.py import sys ... # Cull Idle Servers # place cull_idle_servers.py in /etc/jupyterhub c.JupyterHub.services = [ { 'name': 'cull-idle', 'admin': True, 'command': [sys.executable, '/etc/jupyterhub/cull_idle_servers.py', '--timeout=3000', '--url=http://127.0.0.1:8081/hub/api' ], } ] Put cull_idle_servers.py (found here ) in /etc/jupyterhub/ . Make sure dateutil is intalled in the jupyterhub virtual env. Try >>> import dateutil >>> dateutil.__version__ (using the (jupyterhub) virtual env. Make sure to add import sys to the top of jupyterhub_config.py . Restart JupyterHub. Check for errors. $ sudo systemctl stop jupyterhub $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit If it seems like the cull_idle_servers.py script isn't working, try running cull_idle_servers.py from the command line to see if there are any errors. Make sure you are in the (jupyterhub) virtual environment when you run the script. The script will look for the JUPYTERHUB_API_TOKEN environment variable. An API token can be aquired by logging into JupyterHub (like a regular student) and clicking the [Token] menu from the home page that has the [Stop My Server] and [My Server] buttons. Click [Request new API token] and copy the API token. Then run the lines below (replace ```XXXX```` with your actual API token): $ export JUPYTERHUB_API_TOKEN='XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' $ echo $JUPYTERHUB_API_TOKEN # API token is printed $ cd /etc/jupyterhub $ conda activate jupyterhub (jupyterhub)$ python cull_idle_servers.py --timeout=60 --url=http://127.0.0.1:8081/hub/api # check for errors Modify jupyterhub_config.py and upload to server The additions made to jupyterhub_config.py are shown below: # /etc/jupyterhub/jupyterhub_config.py ... ## Extra Configuration # Maximum number of concurrent servers that can be active at a time c.JupyterHub.active_server_limit = 26 # Maximum number of concurrent users that can be spawning at a time c.JupyterHub.concurrent_spawn_limit = 13 # Whether to shutdown the proxy when the Hub shuts down. c.JupyterHub.cleanup_proxy = True # Whether to shutdown single-user servers when the Hub shuts down. c.JupyterHub.cleanup_servers = True # Cull Idle Servers # place cull_idle_servers.py in /etc/jupyterhub c.JupyterHub.services = [ { 'name': 'cull-idle', 'admin': True, 'command': [sys.executable, '/etc/jupyterhub/cull_idle_servers.py', '--timeout=3000', '--url=http://127.0.0.1:8081/hub/api' ], } ] ... I made these changes in jupyterhub_config.py locally and then used FileZilla to upload the modified config file to the server. After the modified jupyterhub_config.py file is uploaded to the server, restart JupyterHub and make sure there no errors. $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit Summary In this section we added a few extra configuration options to the jupyterhub_config.py file. A few extra configuration options we included were to limit the number of servers that can run at the same time and limit the amount of servers that can spawn at the same time. We also added a cull_idle_servers.py script to the server which will shut down idle servers if a student has not used them in a while. This involved copying the script locally from GitHub, then uploading the script on the server in the /etc/jupyterhub/ directory. The jupyterhub_config.py file has to be modified so that sys is imported and the cull_idle_servers.py script runs and a JupyterHub service Finally we uploaded the modified jupyterhubconfig.py configuration file and restarted JupyterHub. Additional Extras That's it for the main JupyterHub deployment! The next section is about periodic maintenance. After running JupyterHub for two quarters there are a couple lessons learned server regarding maintenance.","title":"Extra Configuration"},{"location":"extra_configuration/#extra-configuration","text":"In this section, we will go over some extra configuration settings we can set in jupyterhub_config.py to help our JupyterHub deployment hum along and help if students forget to logout or too many student try and log in at the same time. Extra Configuration Configuration Options Cull Idle Servers Modify jupyterhub_config.py and upload to server Summary Additional Extras","title":"Extra Configuration"},{"location":"extra_configuration/#configuration-options","text":"In the JupyterHub docs, there is a list of configuration options and descriptions: https://jupyterhub.readthedocs.io/en/stable/api/app.html A couple configuration options in the list seem like good ideas: The class has about 40 students, plus one instructor. Given that class size, I think 100 is a good number for the maximum that can use JupyterHub the same time. The following settings can be configured in /etc/jupyterhub/jupyterhub_config.py : # Maximum number of concurrent servers that can be active at a time. c.JupyterHub.active_server_limit = 100 Having too many users log in all at the same time can overload the server. Let's set this as 20, so half of the class can log in at the same time. # Maximum number of concurrent users that can be spawning at a time. c.JupyterHub.concurrent_spawn_limit = 20 A couple settings relate to shutting down the hub and if user servers shut down too. I want it set so that if I shut down the hub, all the user servers are shut down too. # Whether to shutdown the proxy when the Hub shuts down. c.JupyterHub.cleanup_proxy = True # Whether to shutdown single-user servers when the Hub shuts down. c.JupyterHub.cleanup_servers = True","title":"Configuration Options"},{"location":"extra_configuration/#cull-idle-servers","text":"A problem with JupyterHub deployments might be that some students would not shut down their server when they were done working. Then fourty or so servers would all keep running all the time. The following is kept as a reference, I did not implement it this time: This script from the JupyterHub Examples repo looks like it might help: https://github.com/jupyterhub/jupyterhub/tree/master/examples/cull-idle To get the cull_idle_servers.py script to run as a JupyterHub service, it looks like you need to add the following to jupyterhub_config.py . (Based on this page in the JupyterHub docs) # /etc/jupyterhub/jupyterhub_config.py import sys ... # Cull Idle Servers # place cull_idle_servers.py in /etc/jupyterhub c.JupyterHub.services = [ { 'name': 'cull-idle', 'admin': True, 'command': [sys.executable, '/etc/jupyterhub/cull_idle_servers.py', '--timeout=3000', '--url=http://127.0.0.1:8081/hub/api' ], } ] Put cull_idle_servers.py (found here ) in /etc/jupyterhub/ . Make sure dateutil is intalled in the jupyterhub virtual env. Try >>> import dateutil >>> dateutil.__version__ (using the (jupyterhub) virtual env. Make sure to add import sys to the top of jupyterhub_config.py . Restart JupyterHub. Check for errors. $ sudo systemctl stop jupyterhub $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit If it seems like the cull_idle_servers.py script isn't working, try running cull_idle_servers.py from the command line to see if there are any errors. Make sure you are in the (jupyterhub) virtual environment when you run the script. The script will look for the JUPYTERHUB_API_TOKEN environment variable. An API token can be aquired by logging into JupyterHub (like a regular student) and clicking the [Token] menu from the home page that has the [Stop My Server] and [My Server] buttons. Click [Request new API token] and copy the API token. Then run the lines below (replace ```XXXX```` with your actual API token): $ export JUPYTERHUB_API_TOKEN='XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' $ echo $JUPYTERHUB_API_TOKEN # API token is printed $ cd /etc/jupyterhub $ conda activate jupyterhub (jupyterhub)$ python cull_idle_servers.py --timeout=60 --url=http://127.0.0.1:8081/hub/api # check for errors","title":"Cull Idle Servers"},{"location":"extra_configuration/#modify-jupyterhub_configpy-and-upload-to-server","text":"The additions made to jupyterhub_config.py are shown below: # /etc/jupyterhub/jupyterhub_config.py ... ## Extra Configuration # Maximum number of concurrent servers that can be active at a time c.JupyterHub.active_server_limit = 26 # Maximum number of concurrent users that can be spawning at a time c.JupyterHub.concurrent_spawn_limit = 13 # Whether to shutdown the proxy when the Hub shuts down. c.JupyterHub.cleanup_proxy = True # Whether to shutdown single-user servers when the Hub shuts down. c.JupyterHub.cleanup_servers = True # Cull Idle Servers # place cull_idle_servers.py in /etc/jupyterhub c.JupyterHub.services = [ { 'name': 'cull-idle', 'admin': True, 'command': [sys.executable, '/etc/jupyterhub/cull_idle_servers.py', '--timeout=3000', '--url=http://127.0.0.1:8081/hub/api' ], } ] ... I made these changes in jupyterhub_config.py locally and then used FileZilla to upload the modified config file to the server. After the modified jupyterhub_config.py file is uploaded to the server, restart JupyterHub and make sure there no errors. $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit","title":"Modify jupyterhub_config.py and upload to server"},{"location":"extra_configuration/#summary","text":"In this section we added a few extra configuration options to the jupyterhub_config.py file. A few extra configuration options we included were to limit the number of servers that can run at the same time and limit the amount of servers that can spawn at the same time. We also added a cull_idle_servers.py script to the server which will shut down idle servers if a student has not used them in a while. This involved copying the script locally from GitHub, then uploading the script on the server in the /etc/jupyterhub/ directory. The jupyterhub_config.py file has to be modified so that sys is imported and the cull_idle_servers.py script runs and a JupyterHub service Finally we uploaded the modified jupyterhubconfig.py configuration file and restarted JupyterHub.","title":"Summary"},{"location":"extra_configuration/#additional-extras","text":"That's it for the main JupyterHub deployment! The next section is about periodic maintenance. After running JupyterHub for two quarters there are a couple lessons learned server regarding maintenance.","title":"Additional Extras"},{"location":"github_extension/","text":"GitHub Extension It is possible put in a \"GitHub\" tab into each user's JupyterLab browser. When students click on the GitHub tab, they can view any repo on GitHub.com. Since the \"labs\" and \"notes\" for the course are saved on GitHub, a directory with pre-constructed lab assignments and notes (saved on GitHub) can be pulled in for each JupyterHub user. Any public GitHub repo can be shown and accessed in JupyterLab using the GitHub tab once the GitHub extension for JupyterLab is installed. GitHub Extension Install nodejs Install GitHub extension for JupyterLab Restart JupyterHub and test it out Create notebook config file Acquire GitHub token Modify notebook config file pip install GitHub server extension Point JupyterHub to notebook config file Restart JupyterHub Summary Install nodejs To install the GitHub extension for JupyterHub, first log into the server and install nodejs with conda into the (jupyterhub) virtual environment. $ sudo systemctl stop jupyterhub $ conda activate jupyterhub (jupyterhub)$ conda install -c conda-forge nodejs Install GitHub extension for JupyterLab Enter another conda install line to install the GitHub extension for JupyterLab. (jupyterhub)$ jupyter labextension install @jupyterlab/github Restart JupyterHub and test it out $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub [Ctrl]-[c] to exit Create notebook config file In order for the GitHub tab in JupyterLab to arrive at a specific repo, a couple configuration steps are required. First a notebook config file needs to be created. This notebook config file is different than the jupypterhub_config.py file we have been modifying during this JupyterHub deployment. Acquire GitHub token The docs for the GitHub extension for JupyterLab note that a GitHub token should be acquired, otherwise there is a small limit to the number of requests that can be made to GitHub when the GitHub Tab in JupyterLab is used. Modify notebook config file In the notebook config file (not the jupyterhub_config.py file): c.GitHubConfig.api_url = 'https://git.myserver.com/api/v3' pip install GitHub server extension Point JupyterHub to notebook config file Restart JupyterHub $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub [Ctrl]+[c] to exit Summary This docs page provided an overview of the GitHub extension for JupyterLab. The GitHub extension for JupyterLab adds a new tab in the JupyterLab interface that students can open and see what files are saved to a particular GitHub repo. The GitHub extension for JupyterLab first needs to be installed. After it is installed, there are some extra configuration steps to cause a specific repo to be the default repo when JupyterHub launches students into the JupyterLab interface and they select the GitHub tab.","title":"GitHub Extension for JupyterLab"},{"location":"github_extension/#github-extension","text":"It is possible put in a \"GitHub\" tab into each user's JupyterLab browser. When students click on the GitHub tab, they can view any repo on GitHub.com. Since the \"labs\" and \"notes\" for the course are saved on GitHub, a directory with pre-constructed lab assignments and notes (saved on GitHub) can be pulled in for each JupyterHub user. Any public GitHub repo can be shown and accessed in JupyterLab using the GitHub tab once the GitHub extension for JupyterLab is installed. GitHub Extension Install nodejs Install GitHub extension for JupyterLab Restart JupyterHub and test it out Create notebook config file Acquire GitHub token Modify notebook config file pip install GitHub server extension Point JupyterHub to notebook config file Restart JupyterHub Summary","title":"GitHub Extension"},{"location":"github_extension/#install-nodejs","text":"To install the GitHub extension for JupyterHub, first log into the server and install nodejs with conda into the (jupyterhub) virtual environment. $ sudo systemctl stop jupyterhub $ conda activate jupyterhub (jupyterhub)$ conda install -c conda-forge nodejs","title":"Install nodejs"},{"location":"github_extension/#install-github-extension-for-jupyterlab","text":"Enter another conda install line to install the GitHub extension for JupyterLab. (jupyterhub)$ jupyter labextension install @jupyterlab/github","title":"Install GitHub extension for JupyterLab"},{"location":"github_extension/#restart-jupyterhub-and-test-it-out","text":"$ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub [Ctrl]-[c] to exit","title":"Restart JupyterHub and test it out"},{"location":"github_extension/#create-notebook-config-file","text":"In order for the GitHub tab in JupyterLab to arrive at a specific repo, a couple configuration steps are required. First a notebook config file needs to be created. This notebook config file is different than the jupypterhub_config.py file we have been modifying during this JupyterHub deployment.","title":"Create notebook config file"},{"location":"github_extension/#acquire-github-token","text":"The docs for the GitHub extension for JupyterLab note that a GitHub token should be acquired, otherwise there is a small limit to the number of requests that can be made to GitHub when the GitHub Tab in JupyterLab is used.","title":"Acquire GitHub token"},{"location":"github_extension/#modify-notebook-config-file","text":"In the notebook config file (not the jupyterhub_config.py file): c.GitHubConfig.api_url = 'https://git.myserver.com/api/v3'","title":"Modify notebook config file"},{"location":"github_extension/#pip-install-github-server-extension","text":"","title":"pip install GitHub server extension"},{"location":"github_extension/#point-jupyterhub-to-notebook-config-file","text":"","title":"Point JupyterHub to notebook config file"},{"location":"github_extension/#restart-jupyterhub","text":"$ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub [Ctrl]+[c] to exit","title":"Restart JupyterHub"},{"location":"github_extension/#summary","text":"This docs page provided an overview of the GitHub extension for JupyterLab. The GitHub extension for JupyterLab adds a new tab in the JupyterLab interface that students can open and see what files are saved to a particular GitHub repo. The GitHub extension for JupyterLab first needs to be installed. After it is installed, there are some extra configuration steps to cause a specific repo to be the default repo when JupyterHub launches students into the JupyterLab interface and they select the GitHub tab.","title":"Summary"},{"location":"gitlab_oauth/","text":"Gitlab Authentication Now that the JupyterHub deployment works and we have two users set up on the server, we are going to get into the weeds of getting the Gitlab authenticator to work. Why Gitlab authenticator instead of just setting up users one by one at the command line? LRZ provides Gitlab for both staff and students and binds the accounts to the TUMonline accounts. Instead of emailing students individual user names and passwords (and having students remember another set of usernames and passwords), students could log into JuypterHub using the same login that they use to access their gitlab repositories and TUMonline information. It's just going to take a bit of work to get there. Gitlab Authentication Gitlab OAuth Instance Add the json file to .gitignore Move the json file to the server Modify jupyterhub_config.py Set GITLAB_HOST Install oauthenticator, restart JupyterHub and login Log in with a Google username and password Summary Next Steps Gitlab OAuth Instance To allow students to use Gitlab usernames and passwords to log into JupyterHub, the first thing we need to do is set up a Gitlab OAuth instance. To obtain the Gitlab OAuth credentials, we need to log into Gitlab https://gitlab.lrz.de/profile/applications and select [User Settings], then [Applications] on the menu. Create a new application using JupyterLab as the name and https://m09vm14.ma.tum.de/hub/oauth_callback as the callback URL. Add all scopes (otherwise, you will just get an error later). After creating a new set of OAuth credentials, note the: application ID secret The client ID and client secret strings will be included in our revised JupyterHub configuration. To make things a little easier, we will commit this information to a separate json file where we then pull out the information. Create a json file that looks like this: {\"web\": { \"application_id\":\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"secret\":\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"redirect_uris\":[\"https://m09vm14.ma.tum.de/hub/oauth_callback\"] } } Set the application ID and the client secret accordingly. On a local computer, rename the json file to gitlab_oauth_credentials.json . We can use Python and the json module from the Standard Library to pull out the \"application_id\" and \"client_secret\" from the json file. Make sure the json file is in the same directory on your local computer where the Python code is run. Try the following Python code on your local computer: with open ( 'gitlab_oauth_credentials.json' ) as f : gitlab_oauth = json . load ( f ) print ( gitlab_oauth [ 'web' ][ 'application_id' ]) print ( gitlab_oauth [ 'web' ][ 'secret' ]) The output will be the 'application_id' and 'secret' from the json file. Add the json file to .gitignore Now we need to move the gitlab_oauth_credentials.json to the sever, but before we do: MAKE SURE TO ADD THE FILE TO .gitignore !!! WE DON'T WANT PRIVATE CREDENTIALS STORED ON GITHUB !!! . Warning Important! Do not save private credentials in a public GitHub repository! Keep your credentials private! In .gitignore on my local machine, I added the following lines at the end. Note that locally this file is saved at projectroot/etc/jupyterhub/google_oauth_credentials.json # .gitignore ... ## Config files /etc/jupyterhub/config.json /etc/jupyterhub/google_oauth_credentials.json ... Move the json file to the server Now move the json file over to the server and save it in the /etc/jupyterhub/ directory. I used scp to move the json file over to the server, but you can also use vim on the server and just copy-paste. After the json file is saved on the server, the contents of /etc/jupyterhub on the server should be: /etc/jupyterhub/ \u251c\u2500\u2500 gitlab_oauth_credentials.json \u2514\u2500\u2500 jupyterhub_config.py Modify jupyterhub_config.py Once we get our Gitlab OAuth credentials, we need to edit jupyterhub_conf.py again. Note your Gitlab OAuth credentials are replaced by the credentials from the gitlab_oauth_credentials.json file. # Configuration file for jupyterhub. # /etc/jupyterhub/jupyterhub_config.py # used to read the json gitlab oauth config file import json from oauthenticator.gitlab import LocalGitLabOAuthenticator # PAM Authenticator c = get_config () c . JupyterHub . log_level = 10 c . Spawner . cmd = '/srv/jupyterhub/venv/bin/jupyterhub-singleuser' c . Spawner . default_url = '/lab' # Cookie Secret Files c . JupyterHub . cookie_secret_file = '/srv/jupyterhub/jupyterhub_cookie_secret' c . ConfigurableHTTPProxy . auth_token = '/srv/jupyterhub/proxy_auth_token' # Users # c.Authenticator.whitelist = {'ritter'} # c.Authenticator.admin_users = {'ritter'} # sets a custom html template at the login screen. c . JupyterHub . template_paths = [ '/srv/jupyterhub/custom-templates/' ] c . JupyterHub . authenticator_class = LocalGitLabOAuthenticator with open ( '/etc/jupyterhub/gitlab_oauth_credentials.json' ) as f : gitlab_oauth = json . load ( f ) c . LocalGitLabOAuthenticator . client_id = gitlab_oauth [ 'web' ][ 'application_id' ] c . LocalGitLabOAuthenticator . client_secret = gitlab_oauth [ 'web' ][ 'secret' ] c . LocalGitLabOAuthenticator . oauth_callback_url = 'https://m09vm14.ma.tum.de/hub/oauth_callback' # replace with your domain c . LocalGitLabOAuthenticator . create_system_users = True c . Authenticator . add_user_cmd = [ 'adduser' , '-q' , '--gecos' , '\"\"' , '--disabled-password' , '--force-badname' ] c . LocalGitLabOAuthenticator . hosted_domain = 'ma.tum.de' # replace with your domain c . LocalGitLabOAuthenticator . login_service = 'Technische Universit\u00e4t M\u00fcnchen' # replace with your 'College Name' # Users #c.Authenticator.whitelist = {'ritter','viviana'} c . Authenticator . admin_users = { 'ritter' , 'michael.ritter' } This little line: c . Authenticator . add_user_cmd = [ 'adduser' , '-q' , '--gecos' , '\"\"' , '--disabled-password' , '--force-badname' ] was a real gottacha. Our usernames are often in the form: firstname.lastname When a student logs in, JupyterHub tries to create a new Linux user with a dot . in their username. Usernames with . do not work on Linux. I tried to create a new Linux user with a dot in their username, and the terminal asked me to use the --force-badname flag. So --force-badname is what we'll add to the c.Authenticator.add_user_cmd list. Otherwise, users (students) will be able to authenticate with GitLab, but they won't get a new user account on the server, and they won't be able to run notebooks or Python code. Set GITLAB_HOST Open the file /etc/systemd/system/jupyterhub.service . In the section [Service] add the following line : Environment=\"GITLAB_HOST=https://gitlab.lrz.de\" Install oauthenticator, restart JupyterHub and login Before we can restart JupyterHub and try our Google OAuth configuration out, we need to install the Python package oauthenticator into the virtual environment that runs JupyterHub. Log onto the server, activate the virtual environment by changing into the directory and then issuing the commands: # cd /srv/jupyterhub # source venv/bin/activate pip install oauthenticator # python >>> import oauthenticator >>> oauthenticator.__version__ '0.8.2' >>> exit() Restart the virtual machine and JupyterHub and browse to the web address attached to the server. $ sudo reboot You should see Active in the status screen. If not, there is some trouble shooting to do. Use [Ctrl]+[c] to exit the status screen. \u25cf jupyterhub.service - JupyterHub Loaded: loaded (/etc/systemd/system/jupyterhub.service; disabled; vendor preset: enabled) Active: active (running) since Fri 2019-02-08 18:42:23 UTC; 6s ago Main PID: 9178 (jupyterhub) Tasks: 8 (limit: 1152) Log in with a Google username and password If JupyterHub is running OK and there were no errors after the revisions to the jupyterhub_config.py file. Open a web browser and try to Log in. The login window should now look something like: We can log in with our Google user name and password (college username and password). Pretty sweet! Note the Jupyter notebook file browser is empty after we log on. A new user was created by JupyterHub when we logged in. This new user's home directory is empty. If you added your college username was added to the c.Authenticator.admin_users = { } set in jupyterhub_config.py , you will be able to see an [Admin] tab when you click [Control Panel] in the Jupyter notebook file browser. If you click [Admin], you should see three users in the user list. You can shut down the you college username's notebook server and logout (or play around with some notebooks). After we log in using our college username and password, we can see if JupyterHub created a new user (with our college username) on the server. The command below produces a long list of users. This long list contains the non-root sudo user peter and the Google authenticated user (college username). $ awk -F':' '{ print $1}' /etc/passwd .... uuidd dnsmasq landscape sshd pollinate peter gabby peter.kazarinoff Summary This was a big section and we got a lot accomplished. At the end of it, we have a running JupyterHub server that allows students and faculty to log into JupyterHub using their college useranmes and passwords. We accomplished this in a couple steps: Create a Google OAuth instance in the Google Developer's console. Download and save the json file that stores the client ID and client secret. Figure out how to pull the client ID and secret out of the json file using Python's json module from the Standard Library. Add the json file to .gitignore so that our private client ID and private client secret are not made public. Move the json file over to the server with FileZilla. Modify the jupyterhub_config.py file. Add Google authentication to our JupyterHub configuration. On the server, pip install oauthenticator into the virtual environment that runs JupyterHub. Restart JupyterHub and login with a Google username and password. Use the JuputerHub admin and the terminal to see the new user JupyterHub added to our server Next Steps The next step is to make the login screen look like our college login screen. Right now, students see a orange button on the login screen. Next, we'll mess around with some templates, html and css to get our JupyterHub login screen to look a lot more like the college login screen.","title":"GitLab OAuth"},{"location":"gitlab_oauth/#gitlab-authentication","text":"Now that the JupyterHub deployment works and we have two users set up on the server, we are going to get into the weeds of getting the Gitlab authenticator to work. Why Gitlab authenticator instead of just setting up users one by one at the command line? LRZ provides Gitlab for both staff and students and binds the accounts to the TUMonline accounts. Instead of emailing students individual user names and passwords (and having students remember another set of usernames and passwords), students could log into JuypterHub using the same login that they use to access their gitlab repositories and TUMonline information. It's just going to take a bit of work to get there. Gitlab Authentication Gitlab OAuth Instance Add the json file to .gitignore Move the json file to the server Modify jupyterhub_config.py Set GITLAB_HOST Install oauthenticator, restart JupyterHub and login Log in with a Google username and password Summary Next Steps","title":"Gitlab Authentication"},{"location":"gitlab_oauth/#gitlab-oauth-instance","text":"To allow students to use Gitlab usernames and passwords to log into JupyterHub, the first thing we need to do is set up a Gitlab OAuth instance. To obtain the Gitlab OAuth credentials, we need to log into Gitlab https://gitlab.lrz.de/profile/applications and select [User Settings], then [Applications] on the menu. Create a new application using JupyterLab as the name and https://m09vm14.ma.tum.de/hub/oauth_callback as the callback URL. Add all scopes (otherwise, you will just get an error later). After creating a new set of OAuth credentials, note the: application ID secret The client ID and client secret strings will be included in our revised JupyterHub configuration. To make things a little easier, we will commit this information to a separate json file where we then pull out the information. Create a json file that looks like this: {\"web\": { \"application_id\":\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"secret\":\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"redirect_uris\":[\"https://m09vm14.ma.tum.de/hub/oauth_callback\"] } } Set the application ID and the client secret accordingly. On a local computer, rename the json file to gitlab_oauth_credentials.json . We can use Python and the json module from the Standard Library to pull out the \"application_id\" and \"client_secret\" from the json file. Make sure the json file is in the same directory on your local computer where the Python code is run. Try the following Python code on your local computer: with open ( 'gitlab_oauth_credentials.json' ) as f : gitlab_oauth = json . load ( f ) print ( gitlab_oauth [ 'web' ][ 'application_id' ]) print ( gitlab_oauth [ 'web' ][ 'secret' ]) The output will be the 'application_id' and 'secret' from the json file.","title":"Gitlab OAuth Instance"},{"location":"gitlab_oauth/#add-the-json-file-to-gitignore","text":"Now we need to move the gitlab_oauth_credentials.json to the sever, but before we do: MAKE SURE TO ADD THE FILE TO .gitignore !!! WE DON'T WANT PRIVATE CREDENTIALS STORED ON GITHUB !!! . Warning Important! Do not save private credentials in a public GitHub repository! Keep your credentials private! In .gitignore on my local machine, I added the following lines at the end. Note that locally this file is saved at projectroot/etc/jupyterhub/google_oauth_credentials.json # .gitignore ... ## Config files /etc/jupyterhub/config.json /etc/jupyterhub/google_oauth_credentials.json ...","title":"Add the json file to .gitignore"},{"location":"gitlab_oauth/#move-the-json-file-to-the-server","text":"Now move the json file over to the server and save it in the /etc/jupyterhub/ directory. I used scp to move the json file over to the server, but you can also use vim on the server and just copy-paste. After the json file is saved on the server, the contents of /etc/jupyterhub on the server should be: /etc/jupyterhub/ \u251c\u2500\u2500 gitlab_oauth_credentials.json \u2514\u2500\u2500 jupyterhub_config.py","title":"Move the json file to the server"},{"location":"gitlab_oauth/#modify-jupyterhub_configpy","text":"Once we get our Gitlab OAuth credentials, we need to edit jupyterhub_conf.py again. Note your Gitlab OAuth credentials are replaced by the credentials from the gitlab_oauth_credentials.json file. # Configuration file for jupyterhub. # /etc/jupyterhub/jupyterhub_config.py # used to read the json gitlab oauth config file import json from oauthenticator.gitlab import LocalGitLabOAuthenticator # PAM Authenticator c = get_config () c . JupyterHub . log_level = 10 c . Spawner . cmd = '/srv/jupyterhub/venv/bin/jupyterhub-singleuser' c . Spawner . default_url = '/lab' # Cookie Secret Files c . JupyterHub . cookie_secret_file = '/srv/jupyterhub/jupyterhub_cookie_secret' c . ConfigurableHTTPProxy . auth_token = '/srv/jupyterhub/proxy_auth_token' # Users # c.Authenticator.whitelist = {'ritter'} # c.Authenticator.admin_users = {'ritter'} # sets a custom html template at the login screen. c . JupyterHub . template_paths = [ '/srv/jupyterhub/custom-templates/' ] c . JupyterHub . authenticator_class = LocalGitLabOAuthenticator with open ( '/etc/jupyterhub/gitlab_oauth_credentials.json' ) as f : gitlab_oauth = json . load ( f ) c . LocalGitLabOAuthenticator . client_id = gitlab_oauth [ 'web' ][ 'application_id' ] c . LocalGitLabOAuthenticator . client_secret = gitlab_oauth [ 'web' ][ 'secret' ] c . LocalGitLabOAuthenticator . oauth_callback_url = 'https://m09vm14.ma.tum.de/hub/oauth_callback' # replace with your domain c . LocalGitLabOAuthenticator . create_system_users = True c . Authenticator . add_user_cmd = [ 'adduser' , '-q' , '--gecos' , '\"\"' , '--disabled-password' , '--force-badname' ] c . LocalGitLabOAuthenticator . hosted_domain = 'ma.tum.de' # replace with your domain c . LocalGitLabOAuthenticator . login_service = 'Technische Universit\u00e4t M\u00fcnchen' # replace with your 'College Name' # Users #c.Authenticator.whitelist = {'ritter','viviana'} c . Authenticator . admin_users = { 'ritter' , 'michael.ritter' } This little line: c . Authenticator . add_user_cmd = [ 'adduser' , '-q' , '--gecos' , '\"\"' , '--disabled-password' , '--force-badname' ] was a real gottacha. Our usernames are often in the form: firstname.lastname When a student logs in, JupyterHub tries to create a new Linux user with a dot . in their username. Usernames with . do not work on Linux. I tried to create a new Linux user with a dot in their username, and the terminal asked me to use the --force-badname flag. So --force-badname is what we'll add to the c.Authenticator.add_user_cmd list. Otherwise, users (students) will be able to authenticate with GitLab, but they won't get a new user account on the server, and they won't be able to run notebooks or Python code.","title":"Modify jupyterhub_config.py"},{"location":"gitlab_oauth/#set-gitlab_host","text":"Open the file /etc/systemd/system/jupyterhub.service . In the section [Service] add the following line : Environment=\"GITLAB_HOST=https://gitlab.lrz.de\"","title":"Set GITLAB_HOST"},{"location":"gitlab_oauth/#install-oauthenticator-restart-jupyterhub-and-login","text":"Before we can restart JupyterHub and try our Google OAuth configuration out, we need to install the Python package oauthenticator into the virtual environment that runs JupyterHub. Log onto the server, activate the virtual environment by changing into the directory and then issuing the commands: # cd /srv/jupyterhub # source venv/bin/activate pip install oauthenticator # python >>> import oauthenticator >>> oauthenticator.__version__ '0.8.2' >>> exit() Restart the virtual machine and JupyterHub and browse to the web address attached to the server. $ sudo reboot You should see Active in the status screen. If not, there is some trouble shooting to do. Use [Ctrl]+[c] to exit the status screen. \u25cf jupyterhub.service - JupyterHub Loaded: loaded (/etc/systemd/system/jupyterhub.service; disabled; vendor preset: enabled) Active: active (running) since Fri 2019-02-08 18:42:23 UTC; 6s ago Main PID: 9178 (jupyterhub) Tasks: 8 (limit: 1152)","title":"Install oauthenticator, restart JupyterHub and login"},{"location":"gitlab_oauth/#log-in-with-a-google-username-and-password","text":"If JupyterHub is running OK and there were no errors after the revisions to the jupyterhub_config.py file. Open a web browser and try to Log in. The login window should now look something like: We can log in with our Google user name and password (college username and password). Pretty sweet! Note the Jupyter notebook file browser is empty after we log on. A new user was created by JupyterHub when we logged in. This new user's home directory is empty. If you added your college username was added to the c.Authenticator.admin_users = { } set in jupyterhub_config.py , you will be able to see an [Admin] tab when you click [Control Panel] in the Jupyter notebook file browser. If you click [Admin], you should see three users in the user list. You can shut down the you college username's notebook server and logout (or play around with some notebooks). After we log in using our college username and password, we can see if JupyterHub created a new user (with our college username) on the server. The command below produces a long list of users. This long list contains the non-root sudo user peter and the Google authenticated user (college username). $ awk -F':' '{ print $1}' /etc/passwd .... uuidd dnsmasq landscape sshd pollinate peter gabby peter.kazarinoff","title":"Log in with a Google username and password"},{"location":"gitlab_oauth/#summary","text":"This was a big section and we got a lot accomplished. At the end of it, we have a running JupyterHub server that allows students and faculty to log into JupyterHub using their college useranmes and passwords. We accomplished this in a couple steps: Create a Google OAuth instance in the Google Developer's console. Download and save the json file that stores the client ID and client secret. Figure out how to pull the client ID and secret out of the json file using Python's json module from the Standard Library. Add the json file to .gitignore so that our private client ID and private client secret are not made public. Move the json file over to the server with FileZilla. Modify the jupyterhub_config.py file. Add Google authentication to our JupyterHub configuration. On the server, pip install oauthenticator into the virtual environment that runs JupyterHub. Restart JupyterHub and login with a Google username and password. Use the JuputerHub admin and the terminal to see the new user JupyterHub added to our server","title":"Summary"},{"location":"gitlab_oauth/#next-steps","text":"The next step is to make the login screen look like our college login screen. Right now, students see a orange button on the login screen. Next, we'll mess around with some templates, html and css to get our JupyterHub login screen to look a lot more like the college login screen.","title":"Next Steps"},{"location":"gurobi/","text":"Installing Gurobi In this step, we are going to install Gurobi into our JupyterHub environment. Installing Gurobi on the server For installing Gurobi on the server, first download Gurobi from the Gurobi website at https://www.gurobi.com and unpack the archive in a temporary directory. This will create a folder named gurobi811 or similar, depending on the version you downloaded. We will install gurobi into /opt , so issue the following commands from your temporary directory: $ sudo mv gurobi811 /opt $ cd /opt $ ln -s gurobi811 gurobi Installing Gurobi into the Virtual Environment To install Gurobi into the virtual environment, change into the directory /opt/gurobi/linux64 and issue the following command /opt/gurobi/linux64$ /srv/jupyterhub/venv/bin/python setup.py install This will make sure that the Gurobi modules are installed into the correct environment. License File The Gurobi license file should be located at /opt/gurobi/linux64/bin/gurobi.lic . If your license is stored elsewhere, please remember to set the variable GRB_LICENSE_FILE in the next section accordingly. If you plan to use a token server for Gurobi, you should deploy a license file with the following contents, adapted to your situation: TOKENSERVER=gurobi-license-server.demo.invalid Configuring Environment Variables for Gurobi Gurobi needs to set a few environment variables to work properly. We will automate this by setting the appropriate variables in the systemd configuration. Unfortunately, a little more work is required so that these settings actually make their way into the Jupyter Notebook / Lab process and can then be seen by Gurobi. Step 1: Include Variable Settings into systemd Change /etc/systemd/system/jupyterhub.service to look like this: [Unit] Description = JupyterHub After = syslog.target network.target [Service] User = root Environment = \"PATH=/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/srv/jupyterhub/venv/bin/:/opt/gurobi/linux64/bin\" Environment = \"GUROBI_HOME=/opt/gurobi/linux64\" Environment = \"GRB_LICENSE_FILE=/opt/gurobi/linux64/bin/gurobi.lic\" Environment = \"LD_LIBRARY_PATH=/opt/gurobi/linux64/lib\" Environment = \"GITLAB_HOST=https://gitlab.lrz.de\" PassEnvironment = GUROBI_HOME GRB_LICENSE_FILE LD_LIBRARY_PATH ExecStart = /srv/jupyterhub/venv/bin/jupyterhub -f /etc/jupyterhub/jupyterhub_config.py [Install] WantedBy = multi-user.target Note that we not only set the variables, we also pass them on using the PassEnvironment directive. This is necessary, because otherwise the variables would only be set for the command in ExecStart and then be unset again. Step 2: Pass Variable Settings to Jupyter Notebooks While the variables are now visible for the jupyterhub process, they are not automatically passed on to the separate notebook processes, so the local Python interpreter will still not be able to see them. This is a security measure, but for our purposes, passing the variables is necessary, so we will add the following lines to the file /etc/jupyterhub/jupyterhub_config.py : # import all variables from os into jupyter processes import os for var in os . environ : c . Spawner . env_keep . append ( var ) Restarting JupyterHub Do not forget to restart the JupyterHub daemon so that the settings take effect. $ sudo systemctl daemon - reload $ sudo service jupyterhub stop $ sudo service jupyterhub start","title":"Gurobi Installation"},{"location":"gurobi/#installing-gurobi","text":"In this step, we are going to install Gurobi into our JupyterHub environment.","title":"Installing Gurobi"},{"location":"gurobi/#installing-gurobi-on-the-server","text":"For installing Gurobi on the server, first download Gurobi from the Gurobi website at https://www.gurobi.com and unpack the archive in a temporary directory. This will create a folder named gurobi811 or similar, depending on the version you downloaded. We will install gurobi into /opt , so issue the following commands from your temporary directory: $ sudo mv gurobi811 /opt $ cd /opt $ ln -s gurobi811 gurobi","title":"Installing Gurobi on the server"},{"location":"gurobi/#installing-gurobi-into-the-virtual-environment","text":"To install Gurobi into the virtual environment, change into the directory /opt/gurobi/linux64 and issue the following command /opt/gurobi/linux64$ /srv/jupyterhub/venv/bin/python setup.py install This will make sure that the Gurobi modules are installed into the correct environment.","title":"Installing Gurobi into the Virtual Environment"},{"location":"gurobi/#license-file","text":"The Gurobi license file should be located at /opt/gurobi/linux64/bin/gurobi.lic . If your license is stored elsewhere, please remember to set the variable GRB_LICENSE_FILE in the next section accordingly. If you plan to use a token server for Gurobi, you should deploy a license file with the following contents, adapted to your situation: TOKENSERVER=gurobi-license-server.demo.invalid","title":"License File"},{"location":"gurobi/#configuring-environment-variables-for-gurobi","text":"Gurobi needs to set a few environment variables to work properly. We will automate this by setting the appropriate variables in the systemd configuration. Unfortunately, a little more work is required so that these settings actually make their way into the Jupyter Notebook / Lab process and can then be seen by Gurobi.","title":"Configuring Environment Variables for Gurobi"},{"location":"gurobi/#step-1-include-variable-settings-into-systemd","text":"Change /etc/systemd/system/jupyterhub.service to look like this: [Unit] Description = JupyterHub After = syslog.target network.target [Service] User = root Environment = \"PATH=/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/srv/jupyterhub/venv/bin/:/opt/gurobi/linux64/bin\" Environment = \"GUROBI_HOME=/opt/gurobi/linux64\" Environment = \"GRB_LICENSE_FILE=/opt/gurobi/linux64/bin/gurobi.lic\" Environment = \"LD_LIBRARY_PATH=/opt/gurobi/linux64/lib\" Environment = \"GITLAB_HOST=https://gitlab.lrz.de\" PassEnvironment = GUROBI_HOME GRB_LICENSE_FILE LD_LIBRARY_PATH ExecStart = /srv/jupyterhub/venv/bin/jupyterhub -f /etc/jupyterhub/jupyterhub_config.py [Install] WantedBy = multi-user.target Note that we not only set the variables, we also pass them on using the PassEnvironment directive. This is necessary, because otherwise the variables would only be set for the command in ExecStart and then be unset again.","title":"Step 1: Include Variable Settings into systemd"},{"location":"gurobi/#step-2-pass-variable-settings-to-jupyter-notebooks","text":"While the variables are now visible for the jupyterhub process, they are not automatically passed on to the separate notebook processes, so the local Python interpreter will still not be able to see them. This is a security measure, but for our purposes, passing the variables is necessary, so we will add the following lines to the file /etc/jupyterhub/jupyterhub_config.py : # import all variables from os into jupyter processes import os for var in os . environ : c . Spawner . env_keep . append ( var )","title":"Step 2: Pass Variable Settings to Jupyter Notebooks"},{"location":"gurobi/#restarting-jupyterhub","text":"Do not forget to restart the JupyterHub daemon so that the settings take effect. $ sudo systemctl daemon - reload $ sudo service jupyterhub stop $ sudo service jupyterhub start","title":"Restarting JupyterHub"},{"location":"imprint_privacy/","text":"Imprint and Privacy Statement Next, we'll add an imprint and a privacy statement to the jupyterhub configuration. Imprint and Privacy Statement Copy templates Modify templates Modify jupyterhub_config.py Add imprint and privacy statement static pages /srv/jupyterhub/venv/share/jupyterhub/static/about.html /srv/jupyterhub/venv/share/jupyterhub/static/privacy.html Summary Next Steps Copy templates We start by copying the login page template where we will add two links to imprint and privacy statement pages. $ cd /srv/jupyterhub $ source /srv/jupyterhub/venv/bin/activate ( venv ) $ mkdir custom-templates ( venv ) $ cp ./venv/share/jupyterhub/templates/login.html custom-templates/ Modify templates Modify the template to your liking. As an example, we could use the following login.html : {% extends \"templates/login.html\" %} {% block login %} {{ super() }} < div class = \"container\" >< div class = \"row\" >< a class = \"pull-left\" href = \"/hub/static/about.html\" > About / Impressum </ a >< a class = \"pull-right\" href = \"/hub/static/privacy.html\" > Privacy Statement / Datenschutzerkl\u00e4rung </ a ></ div ></ div > {% endblock %} Modify jupyterhub_config.py To actually use the custom template, we add the following lines to jupyter_config.py (after the other edits). Remember, the file is located at /etc/jupyterhub/ . # sets a custom html template at the login screen. c . JupyterHub . template_paths = [ '/srv/jupyterhub/custom-templates/' ] Add imprint and privacy statement static pages JupyterHub automatically serves pages located in /srv/jupyterhub/venv/share/jupyterhub/static . We therefore simply create the files about.html and privacy.html that we need in that directory. Copy the following contents into the respective files: /srv/jupyterhub/venv/share/jupyterhub/static/about.html <!DOCTYPE HTML> < html > < head > < meta charset = \"utf-8\" > < title > JupyterHub </ title > < meta http-equiv = \"X-UA-Compatible\" content = \"chrome=1\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"stylesheet\" href = \"/hub/static/css/style.min.css?v=883a1cf654bd9f5cdc5ca7c91efe7d71\" type = \"text/css\" /> < script src = \"/hub/static/components/requirejs/require.js?v=f0cc8bbb2fcef87fc194fecbb632fcfa\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script src = \"/hub/static/components/jquery/dist/jquery.min.js?v=a09e13ee94d51c524b7e2a728c7d4039\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script src = \"/hub/static/components/bootstrap/dist/js/bootstrap.min.js?v=2f34b630ffe30ba2ff2b91e3f3c322a1\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script > require . config ({ urlArgs : \"v=20190429131906\" , baseUrl : '/hub/static/js' , paths : { components : '../components' , jquery : '../components/jquery/dist/jquery.min' , bootstrap : '../components/bootstrap/dist/js/bootstrap.min' , moment : \"../components/moment/moment\" , }, shim : { bootstrap : { deps : [ \"jquery\" ], exports : \"bootstrap\" }, } }); </ script > < script type = \"text/javascript\" > window . jhdata = { base_url : \"/hub/\" , prefix : \"/\" , admin_access : false , options_form : false , } </ script > </ head > < body > < noscript > < div id = 'noscript' > JupyterHub requires JavaScript. < br > Please enable it to proceed. </ div > </ noscript > < nav class = \"navbar navbar-default\" > < div class = \"container-fluid\" > < div class = \"navbar-header\" > < span id = \"jupyterhub-logo\" class = \"pull-left\" >< a href = \"/hub/\" >< img src = '/hub/logo' alt = 'JupyterHub' class = 'jpy-logo' title = 'Home' /></ a ></ span > < button type = \"button\" class = \"navbar-toggle collapsed\" data-toggle = \"collapse\" data-target = \"#thenavbar\" aria-expanded = \"false\" > < span class = \"sr-only\" > Toggle navigation </ span > < span class = \"icon-bar\" ></ span > < span class = \"icon-bar\" ></ span > < span class = \"icon-bar\" ></ span > </ button > </ div > < div class = \"collapse navbar-collapse\" id = \"thenavbar\" > < ul class = \"nav navbar-nav navbar-right\" > < li > </ li > </ ul > </ div > </ div > </ nav > < div id = \"about-main\" class = \"container\" > < h1 > Impressum </ h1 > < p > Die nachstehenden Informationen enthalten die gesetzlich vorgesehenen Pflichtangaben zur Anbieterkennzeichnung, zu den datenschutzrechtlichen Informationspflichten sowie wichtige rechtliche Hinweise zur Internet-Pr\u00e4senz < a href = \"https://m09vm14.ma.tum.de\" > https://m09v14.ma.tum.de </ a > . </ p > < h2 > Vertretungsberechtigt </ h2 > < p > Die Technische Universit\u00e4t M\u00fcnchen wird gesetzlich vertreten durch den Pr\u00e4sidenten Prof. Dr. Dr. h.c. mult. Wolfgang A. Herrmann. </ p > < p > Die Technische Universit\u00e4t M\u00fcnchen ist gem\u00e4\u00df Art. 11 Abs. 1 S. 1 BayHSchG eine K\u00f6rperschaft des \u00f6ffentlichen Rechts mit dem Recht der Selbstverwaltung im Rahmen der Gesetze und zugleich gem\u00e4\u00df Art. 1 Abs. 2 Satz 1 Nr. 1 BayHSchG staatliche Hochschule (staatliche Einrichtung). Die Technische Universit\u00e4t M\u00fcnchen nimmt eigene Angelegenheiten als K\u00f6rperschaft (K\u00f6rperschaftsangelegenheiten) unter der Rechtsaufsicht der Aufsichtsbeh\u00f6rde, staatliche Angelegenheiten als staatliche Einrichtung wahr (Art. 12 Abs. 1 BayHSchG). </ p > < h2 > Zust\u00e4ndige Aufsichtsbeh\u00f6rde </ h2 > < address >< strong > Bayerisches Staatsministerium f\u00fcr Wissenschaft und Kunst </ strong >< br > Salvatorstra\u00dfe 2 < br > 80333 M\u00fcnchen. </ address > < h2 > Umsatzsteuer < U + 00AD > identifikations < U + 00AD > nummer </ h2 > < p > DE811193231 (gem\u00e4\u00df \u00a7 27a Umsatzsteuergesetz) </ p > < h2 > Inhaltlich verantwortlich </ h2 > < address >< strong > Dr. Michael Ritter </ strong >< br > Fakult\u00e4t f\u00fcr Mathematik < br > Boltzmannstr. 3 < br > 85747 Garching < br > michael.ritter (at) tum.de </ address > < h2 > Bildnachweis </ h2 > < p > Sofern keine weiteren Angaben zu den Bildern angegeben sind, gelten folgende Quellen: MA TUM, Andreas Heddergott / TUM, Astrid Eckert / TUM. </ p > < h2 > Technische Umsetzung </ h2 > < p > Diese Website ist mit Nginx / JupyterHub umgesetzt. </ p > < h2 > Haftungshinweis </ h2 > < p > Trotz sorgf\u00e4ltiger inhaltlicher Kontrolle \u00fcbernehmen wir keine Haftung f\u00fcr die Inhalte externer Links. F\u00fcr den Inhalt der verlinkten Seiten sind ausschlie\u00dflich deren Betreiber verantwortlich. </ p > < p > Namentlich gekennzeichnete Beitr\u00e4ge geben die Meinung des Autors wieder. F\u00fcr die Inhalte der Beitr\u00e4ge sind ausschlie\u00dflich die Autoren verantwortlich. </ p > < h2 > Anschrift </ h2 > < address >< strong > Fakult\u00e4t f\u00fcr Mathematik </ strong >< br > Boltzmannstra\u00dfe 3 < br > 85748 Garching </ address > </ div > < script > if ( window . location . protocol === \"http:\" ) { // unhide http warning var warning = document . getElementById ( 'insecure-login-warning' ); warning . className = warning . className . replace ( /\\bhidden\\b/ , '' ); } </ script > </ body > </ html > /srv/jupyterhub/venv/share/jupyterhub/static/privacy.html <!DOCTYPE HTML> < html > < head > < meta charset = \"utf-8\" > < title > JupyterHub </ title > < meta http-equiv = \"X-UA-Compatible\" content = \"chrome=1\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"stylesheet\" href = \"/hub/static/css/style.min.css?v=883a1cf654bd9f5cdc5ca7c91efe7d71\" type = \"text/css\" /> < script src = \"/hub/static/components/requirejs/require.js?v=f0cc8bbb2fcef87fc194fecbb632fcfa\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script src = \"/hub/static/components/jquery/dist/jquery.min.js?v=a09e13ee94d51c524b7e2a728c7d4039\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script src = \"/hub/static/components/bootstrap/dist/js/bootstrap.min.js?v=2f34b630ffe30ba2ff2b91e3f3c322a1\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script > require . config ({ urlArgs : \"v=20190429131906\" , baseUrl : '/hub/static/js' , paths : { components : '../components' , jquery : '../components/jquery/dist/jquery.min' , bootstrap : '../components/bootstrap/dist/js/bootstrap.min' , moment : \"../components/moment/moment\" , }, shim : { bootstrap : { deps : [ \"jquery\" ], exports : \"bootstrap\" }, } }); </ script > < script type = \"text/javascript\" > window . jhdata = { base_url : \"/hub/\" , prefix : \"/\" , admin_access : false , options_form : false , } </ script > </ head > < body > < noscript > < div id = 'noscript' > JupyterHub requires JavaScript. < br > Please enable it to proceed. </ div > </ noscript > < nav class = \"navbar navbar-default\" > < div class = \"container-fluid\" > < div class = \"navbar-header\" > < span id = \"jupyterhub-logo\" class = \"pull-left\" >< a href = \"/hub/\" >< img src = '/hub/logo' alt = 'JupyterHub' class = 'jpy-logo' title = 'Home' /></ a ></ span > < button type = \"button\" class = \"navbar-toggle collapsed\" data-toggle = \"collapse\" data-target = \"#thenavbar\" aria-expanded = \"false\" > < span class = \"sr-only\" > Toggle navigation </ span > < span class = \"icon-bar\" ></ span > < span class = \"icon-bar\" ></ span > < span class = \"icon-bar\" ></ span > </ button > </ div > < div class = \"collapse navbar-collapse\" id = \"thenavbar\" > < ul class = \"nav navbar-nav navbar-right\" > < li > </ li > </ ul > </ div > </ div > </ nav > < div id = \"about-main\" class = \"container\" > < h1 > Datenschutzerkl\u00e4rung </ h1 > < p > F\u00fcr die Technische Universit\u00e4t M\u00fcnchen ist Datenschutz ein wichtiges Anliegen. Wir m\u00f6chten, dass Sie wissen, wann wir welche Daten speichern und wie wir sie verwenden. Personenbezogene Daten werden nur im technisch notwendigen Umfang erhoben. Die Datenverarbeitung unterliegt den geltenden datenschutzrechtlichen Bestimmungen, insbesondere der Datenschutz-Grundverordnung (DSGVO), dem Bayerischen Datenschutzgesetz (BayDSG) und dem Telemediengesetz (TMG). </ p > < p > Diese Datenschutzerkl\u00e4rung (Informationspflicht nach Art. 13, 14 der Datenschutz-Grundverordnung DSGVO) bezieht sich auf die Verarbeitung personenbezogener Daten im Rahmen dieses Internetauftritts. Nachfolgend informieren wir Sie \u00fcber Art, Umfang und Zweck der Erhebung und Verwendung personenbezogener Daten. Diese Informationen k\u00f6nnen jederzeit von unserer Webseite abgerufen werden. </ p > < h2 > Verantwortliche Stelle </ h2 > < p > Verantwortliche Stelle im Sinne der Datenschutzgesetze ist: </ p > < address >< strong > Technische Universit\u00e4t M\u00fcnchen </ strong >< br > Arcisstra\u00dfe 21 < br > 80333 M\u00fcnchen < br > Telefon +49 (0)89 289 01 </ address > < h2 > Datenschutzbeauftragter der Technischen Universit\u00e4t M\u00fcnchen: </ h2 > < address >< strong > Prof. Dr. Uwe Baumgarten </ strong >< br > Arcisstra\u00dfe 21 < br > 80333 M\u00fcnchen < br > E-Mail: beauftragter (at) datenschutz.tum.de < br > Weitere Kontaktdaten finden Sie auf < a href = \"https://www.datenschutz.tum.de\" > www.datenschutz.tum.de. </ a ></ address > < h2 > Technische Umsetzung </ h2 > < p > Wenn Sie diese oder andere Internetseiten aufrufen, \u00fcbermitteln Sie \u00fcber Ihren Internetbrowser Daten an unseren Webserver. Dieser wird betrieben von: </ p > < address >< strong > Leibniz-Rechenzentrum (LRZ) </ strong >< br > Boltzmannstr. 1 < br > 85748 Garching bei M\u00fcnchen </ address > < p > Bei jedem Zugriff auf Seiten unserer Webpr\u00e4senzen speichern die Webserver folgende Informationen tempor\u00e4r in Logdateien: </ p > < ul > < li > IP-Adresse des anfragenden Rechners </ li > < li > Datum und Uhrzeit des Zugriffs </ li > < li > Name, URL und \u00fcbertragene Datenmenge der abgerufenen Datei </ li > < li > Zugriffsstatus (angeforderte Datei \u00fcbertragen, nicht gefunden etc.) </ li > < li > Erkennungsdaten des verwendeten Browser- und Betriebssystems (sofern vom anfragenden Webbrowser \u00fcbermittelt) </ li > < li > Webseite, von der aus der Zugriff erfolgte (sofern vom anfragenden Webbrowser \u00fcbermittelt) </ li > < li > Ihre TUM-Kennung oder Ihr Login-Name (sofern beim Login \u00fcbermittelt) </ li > </ ul > < p > Die Verarbeitung der Daten in dieser Logdatei geschieht wie folgt: </ p > < ul > < li > Die Logeintr\u00e4ge werden kontinuierlich automatisch ausgewertet, um Angriffe auf die Webserver erkennen und entsprechend reagieren zu k\u00f6nnen. </ li > < li > In Einzelf\u00e4llen, d.h. bei gemeldeten St\u00f6rungen, Fehlern und Sicherheitsvorf\u00e4llen, erfolgt eine manuelle Analyse. </ li > < li > Logeintr\u00e4ge, die \u00e4lter als sieben Tage sind, werden durch K\u00fcrzung der IP-Adresse anonymisiert. </ li > < li > Die anonymisierten Logs werden zur Erstellung von Zugriffsstatistiken verwendet.Die hierf\u00fcr eingesetzte Software wird lokal vom LRZ betrieben. </ li > < li > Die in den Log-Eintr\u00e4gen enthaltenen IP-Adressen werden vom LRZ nicht mit anderen Daten < U + 00AD > best\u00e4nden zusammengef\u00fchrt, sodass kein R\u00fcckschluss auf einzelne Personen m\u00f6glich ist. </ li > </ ul > < h2 > Zweck und Rechtsgrundlage der Datenverarbeitung </ h2 > < p > Zweck der Verarbeitung personenbezogener Daten ist der Betrieb dieses Internetauftritts. Eine Verarbeitung personenbezogener Daten (IP-Adresse) erfolgt nur, soweit dies zum Zweck des Betriebs des Internetauftritts einschlie\u00dflich dessen Sicherstellung erforderlich ist. </ p > < p > Rechtsgrundlage f\u00fcr die Verarbeitung personenbezogener Daten sind Art. 6 Abs. 1 Buchst. e, Abs. 2 und 3 DSGVO und Art. 4 Abs. 1 des Bayerischen Datenschutzgesetzes (BayDSG). </ p > < h2 > Nutzung und Weitergabe personenbezogener Daten </ h2 > < p > Die Nutzung unserer Webseite ist in der Regel ohne Angabe personen < U + 00AD > bezogener Daten m\u00f6glich. Personenbezogene Daten, die Sie gegebenenfalls \u00fcber Kontaktformulare, Anmeldeformulare und \u00e4hnliche Webseiten auf unseren Webservern an uns leiten, werden nur mit Ihrem Einverst\u00e4ndnis entgegengenommen und dienen ausschlie\u00dflich dem in den Formularen genannten Zweck. Bitte beachten Sie die entsprechenden Hinweise auf den Formularen. </ p > < p > In allen Formularen werden nur die personenbezogenen Daten erhoben, die unbedingt erforderlich sind. \u00dcblicherweise werden die personenbezogenen Daten in einer Datenbank des Leibnitz Rechenzentrums gespeichert und sind den jeweils zust\u00e4ndigen Mitarbeitern der TUM zug\u00e4nglich. Ist der Zweck der Datenerhebung, die Daten auch anderen Mitgliedern der TUM zug\u00e4nglich zu machen, so wird hierbei das Prinzip der Datensparsamkeit beachtet. Ihre Daten werden nicht an Dritte weiteregegeben, es sei denn, dies ist im Formular explizit angegeben. </ p > < p > Soweit Ihre personenbezogenen Daten verarbeitet werden, haben Sie diesbez\u00fcglich im Grundsatz nachfolgende Rechte: </ p > < ul > < li > Auskunft \u00fcber Ihre bei uns gespeicherten Daten und deren Verarbeitung (Art. 15 DSGVO), </ li > < li > Berichtigung/Vervollst\u00e4ndigung unrichtiger personenbezogener Daten (Art. 16 DSGVO), </ li > < li > L\u00f6schung Ihrer bei uns gespeicherten Daten (Art. 17 DSGVO), </ li > < li > Einschr\u00e4nkung der Datenverarbeitung, sofern wir Ihre Daten aufgrund gesetzlicher Pflichten noch nicht l\u00f6schen d\u00fcrfen (Art. 18 DSGVO), </ li > < li > Ggf. ein Recht auf Daten\u00fcbertragbarkeit (Art. 20 DSGVO), </ li > < li > Widerspruch gegen die Verarbeitung Ihrer Daten bei uns (Art. 21 DSGVO). </ li > </ ul > < p > Einschr\u00e4nkungen und Modifikationen der vorgenannten Rechte k\u00f6nnen sich aus Art. 9 und 10 BayDSG sowie aus Art. 20 BayDSG ergeben. </ p > < p > Sofern Sie uns eine Einwilligung erteilt haben, k\u00f6nnen Sie diese jederzeit mit Wirkung f\u00fcr die Zukunft widerrufen. Hierzu wenden Sie sich bitte an it-support (at) tum.de. </ p > < p > Sie k\u00f6nnen sich jederzeit mit einer Beschwerde an die f\u00fcr uns zust\u00e4ndige Aufsichtsbeh\u00f6rde wenden. Die zust\u00e4ndige Datenschutz Aufsichtsbeh\u00f6rde f\u00fcr die Technische Universit\u00e4t M\u00fcnchen ist: </ p > < address >< strong > Der Bayerische Landesbeauftragte f\u00fcr den Datenschutz </ strong >< br > Prof. Dr. Thomas Petri < br > Wagm\u00fcllerstra\u00dfe 18 < br > 80538 M\u00fcnchen < br > E-Mail: poststelle (at) datenschutz-bayern.de < br > Telefon: +49 (0)89 212672-0 < br > < a href = \"https://www.datenschutz-bayern.de\" > https://www.datenschutz-bayern.de </ a ></ address > < p > Der Nutzung von im Rahmen der Impressumspflicht ver\u00f6ffentlichten Kontaktdaten durch Dritte zur \u00dcbersendung von nicht ausdr\u00fccklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdr\u00fccklich widersprochen. Die Betreiber der Seiten behalten sich ausdr\u00fccklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen etwa durch Spam-Mails vor. </ p > < h2 > E-Mail-Sicherheit </ h2 > < p > Informationen, die Sie unverschl\u00fcsselt per elektronischer Post (E-Mail) an uns senden, k\u00f6nnten Dritte m\u00f6glicherweise auf dem \u00dcbertragungsweg lesen. Wir k\u00f6nnen in der Regel Ihre Identit\u00e4t nicht \u00fcberpr\u00fcfen und wissen nicht, wer sich hinter einer E-Mail-Adresse verbirgt. Eine rechtssichere Kommunikation durch einfache E-Mail ist daher nicht gew\u00e4hrleistet. Wir setzen - wie viele E-Mail-Anbieter - Filter gegen unerw\u00fcnschte Werbung (\"SPAM-Filter\") ein, die in seltenen F\u00e4llen auch normale E-Mails f\u00e4lschlicherweise automatisch als unerw\u00fcnschte Werbung einordnen und l\u00f6schen. E-Mails, die sch\u00e4digende Programme (\"Viren\") enthalten, l\u00f6schen wir in jedem Fall automatisch. </ p > < h2 > Cookies </ h2 > < p > Um den Funktionsumfang unseres Internetangebotes zu erweitern und die Nutzung f\u00fcr Sie komfortabler zu gestalten, verwenden wir zum Teil so genannte \"Cookies\". Mit Hilfe dieser Cookies k\u00f6nnen bei dem Aufruf unserer Webseite Daten auf Ihrem Rechner gespeichert werden. Sie k\u00f6nnen das Speichern von Cookies jedoch deaktivieren oder Ihren Browser so einstellen, dass Cookies nur f\u00fcr die Dauer der jeweiligen Verbindung zum Internet gespeichert werden. Hierdurch k\u00f6nnte allerdings der Funktionsumfang unseres Angebotes eingeschr\u00e4nkt werden. </ p > < h2 > Links </ h2 > < p > Von unseren eigenen Inhalten sind Querverweise (\u201eLinks\u201c) auf die Webseiten anderer Anbieter zu unterscheiden. Durch diese Links erm\u00f6glichen wir lediglich den Zugang zur Nutzung fremder Inhalte nach \u00a7 8 Telemediengesetz (TMG). Wir haben keinen Einfluss darauf, dass deren Betreiber die Datenschutzbestimmungen einhalten. F\u00fcr illegale, fehlerhafte oder unvollst\u00e4ndige Inhalte und insbesondere f\u00fcr Sch\u00e4den, die aus der Nutzung oder Nichtnutzung von Informationen Dritter entstehen, haftet allein der jeweilige Anbieter der Seite. </ p > < h2 > Auskunft und Berichtigung </ h2 > < p > Sie haben das Recht, auf schriftlichen Antrag und unentgeltlich Auskunft \u00fcber die personen < U + 00AD > bezogenen Daten zu erhalten, die \u00fcber Sie gespeichert sind. Zus\u00e4tzlich haben Sie das Recht auf Berichtigung unrichtiger Daten, Sperrung und L\u00f6schung. </ p > < address >< strong > Datenschutzbeauftragter der Fakult\u00e4t f\u00fcr Mathematik </ strong >< br > < a href = \"https://campus.tum.de/tumonline/visitenkarte.show_vcard?pPersonenId=EC7C4F2B0019C019&pPersonenGruppe=3\" Dr . Christian Ludwig < br > Boltzmannstra\u00dfe 3 < br > 85748 Garching bei M\u00fcnchen < br > E-Mail: bv.ma (at) datenschutz.tum.de </ address > </ div > < script > if ( window . location . protocol === \"http:\" ) { // unhide http warning var warning = document . getElementById ( 'insecure-login-warning' ); warning . className = warning . className . replace ( /\\bhidden\\b/ , '' ); } </ script > </ body > </ html > Summary In this section we extended the jupyterhub login page by links to an imprint and a privacy statement and created the two static html files. Next Steps The next step is to connect JupyterHub to the TUM Shibboleth system for authentication.","title":"Add Imprint and Privacy Statement"},{"location":"imprint_privacy/#imprint-and-privacy-statement","text":"Next, we'll add an imprint and a privacy statement to the jupyterhub configuration. Imprint and Privacy Statement Copy templates Modify templates Modify jupyterhub_config.py Add imprint and privacy statement static pages /srv/jupyterhub/venv/share/jupyterhub/static/about.html /srv/jupyterhub/venv/share/jupyterhub/static/privacy.html Summary Next Steps","title":"Imprint and Privacy Statement"},{"location":"imprint_privacy/#copy-templates","text":"We start by copying the login page template where we will add two links to imprint and privacy statement pages. $ cd /srv/jupyterhub $ source /srv/jupyterhub/venv/bin/activate ( venv ) $ mkdir custom-templates ( venv ) $ cp ./venv/share/jupyterhub/templates/login.html custom-templates/","title":"Copy templates"},{"location":"imprint_privacy/#modify-templates","text":"Modify the template to your liking. As an example, we could use the following login.html : {% extends \"templates/login.html\" %} {% block login %} {{ super() }} < div class = \"container\" >< div class = \"row\" >< a class = \"pull-left\" href = \"/hub/static/about.html\" > About / Impressum </ a >< a class = \"pull-right\" href = \"/hub/static/privacy.html\" > Privacy Statement / Datenschutzerkl\u00e4rung </ a ></ div ></ div > {% endblock %}","title":"Modify templates"},{"location":"imprint_privacy/#modify-jupyterhub_configpy","text":"To actually use the custom template, we add the following lines to jupyter_config.py (after the other edits). Remember, the file is located at /etc/jupyterhub/ . # sets a custom html template at the login screen. c . JupyterHub . template_paths = [ '/srv/jupyterhub/custom-templates/' ]","title":"Modify jupyterhub_config.py"},{"location":"imprint_privacy/#add-imprint-and-privacy-statement-static-pages","text":"JupyterHub automatically serves pages located in /srv/jupyterhub/venv/share/jupyterhub/static . We therefore simply create the files about.html and privacy.html that we need in that directory. Copy the following contents into the respective files:","title":"Add imprint and privacy statement static pages"},{"location":"imprint_privacy/#srvjupyterhubvenvsharejupyterhubstaticabouthtml","text":"<!DOCTYPE HTML> < html > < head > < meta charset = \"utf-8\" > < title > JupyterHub </ title > < meta http-equiv = \"X-UA-Compatible\" content = \"chrome=1\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"stylesheet\" href = \"/hub/static/css/style.min.css?v=883a1cf654bd9f5cdc5ca7c91efe7d71\" type = \"text/css\" /> < script src = \"/hub/static/components/requirejs/require.js?v=f0cc8bbb2fcef87fc194fecbb632fcfa\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script src = \"/hub/static/components/jquery/dist/jquery.min.js?v=a09e13ee94d51c524b7e2a728c7d4039\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script src = \"/hub/static/components/bootstrap/dist/js/bootstrap.min.js?v=2f34b630ffe30ba2ff2b91e3f3c322a1\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script > require . config ({ urlArgs : \"v=20190429131906\" , baseUrl : '/hub/static/js' , paths : { components : '../components' , jquery : '../components/jquery/dist/jquery.min' , bootstrap : '../components/bootstrap/dist/js/bootstrap.min' , moment : \"../components/moment/moment\" , }, shim : { bootstrap : { deps : [ \"jquery\" ], exports : \"bootstrap\" }, } }); </ script > < script type = \"text/javascript\" > window . jhdata = { base_url : \"/hub/\" , prefix : \"/\" , admin_access : false , options_form : false , } </ script > </ head > < body > < noscript > < div id = 'noscript' > JupyterHub requires JavaScript. < br > Please enable it to proceed. </ div > </ noscript > < nav class = \"navbar navbar-default\" > < div class = \"container-fluid\" > < div class = \"navbar-header\" > < span id = \"jupyterhub-logo\" class = \"pull-left\" >< a href = \"/hub/\" >< img src = '/hub/logo' alt = 'JupyterHub' class = 'jpy-logo' title = 'Home' /></ a ></ span > < button type = \"button\" class = \"navbar-toggle collapsed\" data-toggle = \"collapse\" data-target = \"#thenavbar\" aria-expanded = \"false\" > < span class = \"sr-only\" > Toggle navigation </ span > < span class = \"icon-bar\" ></ span > < span class = \"icon-bar\" ></ span > < span class = \"icon-bar\" ></ span > </ button > </ div > < div class = \"collapse navbar-collapse\" id = \"thenavbar\" > < ul class = \"nav navbar-nav navbar-right\" > < li > </ li > </ ul > </ div > </ div > </ nav > < div id = \"about-main\" class = \"container\" > < h1 > Impressum </ h1 > < p > Die nachstehenden Informationen enthalten die gesetzlich vorgesehenen Pflichtangaben zur Anbieterkennzeichnung, zu den datenschutzrechtlichen Informationspflichten sowie wichtige rechtliche Hinweise zur Internet-Pr\u00e4senz < a href = \"https://m09vm14.ma.tum.de\" > https://m09v14.ma.tum.de </ a > . </ p > < h2 > Vertretungsberechtigt </ h2 > < p > Die Technische Universit\u00e4t M\u00fcnchen wird gesetzlich vertreten durch den Pr\u00e4sidenten Prof. Dr. Dr. h.c. mult. Wolfgang A. Herrmann. </ p > < p > Die Technische Universit\u00e4t M\u00fcnchen ist gem\u00e4\u00df Art. 11 Abs. 1 S. 1 BayHSchG eine K\u00f6rperschaft des \u00f6ffentlichen Rechts mit dem Recht der Selbstverwaltung im Rahmen der Gesetze und zugleich gem\u00e4\u00df Art. 1 Abs. 2 Satz 1 Nr. 1 BayHSchG staatliche Hochschule (staatliche Einrichtung). Die Technische Universit\u00e4t M\u00fcnchen nimmt eigene Angelegenheiten als K\u00f6rperschaft (K\u00f6rperschaftsangelegenheiten) unter der Rechtsaufsicht der Aufsichtsbeh\u00f6rde, staatliche Angelegenheiten als staatliche Einrichtung wahr (Art. 12 Abs. 1 BayHSchG). </ p > < h2 > Zust\u00e4ndige Aufsichtsbeh\u00f6rde </ h2 > < address >< strong > Bayerisches Staatsministerium f\u00fcr Wissenschaft und Kunst </ strong >< br > Salvatorstra\u00dfe 2 < br > 80333 M\u00fcnchen. </ address > < h2 > Umsatzsteuer < U + 00AD > identifikations < U + 00AD > nummer </ h2 > < p > DE811193231 (gem\u00e4\u00df \u00a7 27a Umsatzsteuergesetz) </ p > < h2 > Inhaltlich verantwortlich </ h2 > < address >< strong > Dr. Michael Ritter </ strong >< br > Fakult\u00e4t f\u00fcr Mathematik < br > Boltzmannstr. 3 < br > 85747 Garching < br > michael.ritter (at) tum.de </ address > < h2 > Bildnachweis </ h2 > < p > Sofern keine weiteren Angaben zu den Bildern angegeben sind, gelten folgende Quellen: MA TUM, Andreas Heddergott / TUM, Astrid Eckert / TUM. </ p > < h2 > Technische Umsetzung </ h2 > < p > Diese Website ist mit Nginx / JupyterHub umgesetzt. </ p > < h2 > Haftungshinweis </ h2 > < p > Trotz sorgf\u00e4ltiger inhaltlicher Kontrolle \u00fcbernehmen wir keine Haftung f\u00fcr die Inhalte externer Links. F\u00fcr den Inhalt der verlinkten Seiten sind ausschlie\u00dflich deren Betreiber verantwortlich. </ p > < p > Namentlich gekennzeichnete Beitr\u00e4ge geben die Meinung des Autors wieder. F\u00fcr die Inhalte der Beitr\u00e4ge sind ausschlie\u00dflich die Autoren verantwortlich. </ p > < h2 > Anschrift </ h2 > < address >< strong > Fakult\u00e4t f\u00fcr Mathematik </ strong >< br > Boltzmannstra\u00dfe 3 < br > 85748 Garching </ address > </ div > < script > if ( window . location . protocol === \"http:\" ) { // unhide http warning var warning = document . getElementById ( 'insecure-login-warning' ); warning . className = warning . className . replace ( /\\bhidden\\b/ , '' ); } </ script > </ body > </ html >","title":"/srv/jupyterhub/venv/share/jupyterhub/static/about.html"},{"location":"imprint_privacy/#srvjupyterhubvenvsharejupyterhubstaticprivacyhtml","text":"<!DOCTYPE HTML> < html > < head > < meta charset = \"utf-8\" > < title > JupyterHub </ title > < meta http-equiv = \"X-UA-Compatible\" content = \"chrome=1\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"stylesheet\" href = \"/hub/static/css/style.min.css?v=883a1cf654bd9f5cdc5ca7c91efe7d71\" type = \"text/css\" /> < script src = \"/hub/static/components/requirejs/require.js?v=f0cc8bbb2fcef87fc194fecbb632fcfa\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script src = \"/hub/static/components/jquery/dist/jquery.min.js?v=a09e13ee94d51c524b7e2a728c7d4039\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script src = \"/hub/static/components/bootstrap/dist/js/bootstrap.min.js?v=2f34b630ffe30ba2ff2b91e3f3c322a1\" type = \"text/javascript\" charset = \"utf-8\" ></ script > < script > require . config ({ urlArgs : \"v=20190429131906\" , baseUrl : '/hub/static/js' , paths : { components : '../components' , jquery : '../components/jquery/dist/jquery.min' , bootstrap : '../components/bootstrap/dist/js/bootstrap.min' , moment : \"../components/moment/moment\" , }, shim : { bootstrap : { deps : [ \"jquery\" ], exports : \"bootstrap\" }, } }); </ script > < script type = \"text/javascript\" > window . jhdata = { base_url : \"/hub/\" , prefix : \"/\" , admin_access : false , options_form : false , } </ script > </ head > < body > < noscript > < div id = 'noscript' > JupyterHub requires JavaScript. < br > Please enable it to proceed. </ div > </ noscript > < nav class = \"navbar navbar-default\" > < div class = \"container-fluid\" > < div class = \"navbar-header\" > < span id = \"jupyterhub-logo\" class = \"pull-left\" >< a href = \"/hub/\" >< img src = '/hub/logo' alt = 'JupyterHub' class = 'jpy-logo' title = 'Home' /></ a ></ span > < button type = \"button\" class = \"navbar-toggle collapsed\" data-toggle = \"collapse\" data-target = \"#thenavbar\" aria-expanded = \"false\" > < span class = \"sr-only\" > Toggle navigation </ span > < span class = \"icon-bar\" ></ span > < span class = \"icon-bar\" ></ span > < span class = \"icon-bar\" ></ span > </ button > </ div > < div class = \"collapse navbar-collapse\" id = \"thenavbar\" > < ul class = \"nav navbar-nav navbar-right\" > < li > </ li > </ ul > </ div > </ div > </ nav > < div id = \"about-main\" class = \"container\" > < h1 > Datenschutzerkl\u00e4rung </ h1 > < p > F\u00fcr die Technische Universit\u00e4t M\u00fcnchen ist Datenschutz ein wichtiges Anliegen. Wir m\u00f6chten, dass Sie wissen, wann wir welche Daten speichern und wie wir sie verwenden. Personenbezogene Daten werden nur im technisch notwendigen Umfang erhoben. Die Datenverarbeitung unterliegt den geltenden datenschutzrechtlichen Bestimmungen, insbesondere der Datenschutz-Grundverordnung (DSGVO), dem Bayerischen Datenschutzgesetz (BayDSG) und dem Telemediengesetz (TMG). </ p > < p > Diese Datenschutzerkl\u00e4rung (Informationspflicht nach Art. 13, 14 der Datenschutz-Grundverordnung DSGVO) bezieht sich auf die Verarbeitung personenbezogener Daten im Rahmen dieses Internetauftritts. Nachfolgend informieren wir Sie \u00fcber Art, Umfang und Zweck der Erhebung und Verwendung personenbezogener Daten. Diese Informationen k\u00f6nnen jederzeit von unserer Webseite abgerufen werden. </ p > < h2 > Verantwortliche Stelle </ h2 > < p > Verantwortliche Stelle im Sinne der Datenschutzgesetze ist: </ p > < address >< strong > Technische Universit\u00e4t M\u00fcnchen </ strong >< br > Arcisstra\u00dfe 21 < br > 80333 M\u00fcnchen < br > Telefon +49 (0)89 289 01 </ address > < h2 > Datenschutzbeauftragter der Technischen Universit\u00e4t M\u00fcnchen: </ h2 > < address >< strong > Prof. Dr. Uwe Baumgarten </ strong >< br > Arcisstra\u00dfe 21 < br > 80333 M\u00fcnchen < br > E-Mail: beauftragter (at) datenschutz.tum.de < br > Weitere Kontaktdaten finden Sie auf < a href = \"https://www.datenschutz.tum.de\" > www.datenschutz.tum.de. </ a ></ address > < h2 > Technische Umsetzung </ h2 > < p > Wenn Sie diese oder andere Internetseiten aufrufen, \u00fcbermitteln Sie \u00fcber Ihren Internetbrowser Daten an unseren Webserver. Dieser wird betrieben von: </ p > < address >< strong > Leibniz-Rechenzentrum (LRZ) </ strong >< br > Boltzmannstr. 1 < br > 85748 Garching bei M\u00fcnchen </ address > < p > Bei jedem Zugriff auf Seiten unserer Webpr\u00e4senzen speichern die Webserver folgende Informationen tempor\u00e4r in Logdateien: </ p > < ul > < li > IP-Adresse des anfragenden Rechners </ li > < li > Datum und Uhrzeit des Zugriffs </ li > < li > Name, URL und \u00fcbertragene Datenmenge der abgerufenen Datei </ li > < li > Zugriffsstatus (angeforderte Datei \u00fcbertragen, nicht gefunden etc.) </ li > < li > Erkennungsdaten des verwendeten Browser- und Betriebssystems (sofern vom anfragenden Webbrowser \u00fcbermittelt) </ li > < li > Webseite, von der aus der Zugriff erfolgte (sofern vom anfragenden Webbrowser \u00fcbermittelt) </ li > < li > Ihre TUM-Kennung oder Ihr Login-Name (sofern beim Login \u00fcbermittelt) </ li > </ ul > < p > Die Verarbeitung der Daten in dieser Logdatei geschieht wie folgt: </ p > < ul > < li > Die Logeintr\u00e4ge werden kontinuierlich automatisch ausgewertet, um Angriffe auf die Webserver erkennen und entsprechend reagieren zu k\u00f6nnen. </ li > < li > In Einzelf\u00e4llen, d.h. bei gemeldeten St\u00f6rungen, Fehlern und Sicherheitsvorf\u00e4llen, erfolgt eine manuelle Analyse. </ li > < li > Logeintr\u00e4ge, die \u00e4lter als sieben Tage sind, werden durch K\u00fcrzung der IP-Adresse anonymisiert. </ li > < li > Die anonymisierten Logs werden zur Erstellung von Zugriffsstatistiken verwendet.Die hierf\u00fcr eingesetzte Software wird lokal vom LRZ betrieben. </ li > < li > Die in den Log-Eintr\u00e4gen enthaltenen IP-Adressen werden vom LRZ nicht mit anderen Daten < U + 00AD > best\u00e4nden zusammengef\u00fchrt, sodass kein R\u00fcckschluss auf einzelne Personen m\u00f6glich ist. </ li > </ ul > < h2 > Zweck und Rechtsgrundlage der Datenverarbeitung </ h2 > < p > Zweck der Verarbeitung personenbezogener Daten ist der Betrieb dieses Internetauftritts. Eine Verarbeitung personenbezogener Daten (IP-Adresse) erfolgt nur, soweit dies zum Zweck des Betriebs des Internetauftritts einschlie\u00dflich dessen Sicherstellung erforderlich ist. </ p > < p > Rechtsgrundlage f\u00fcr die Verarbeitung personenbezogener Daten sind Art. 6 Abs. 1 Buchst. e, Abs. 2 und 3 DSGVO und Art. 4 Abs. 1 des Bayerischen Datenschutzgesetzes (BayDSG). </ p > < h2 > Nutzung und Weitergabe personenbezogener Daten </ h2 > < p > Die Nutzung unserer Webseite ist in der Regel ohne Angabe personen < U + 00AD > bezogener Daten m\u00f6glich. Personenbezogene Daten, die Sie gegebenenfalls \u00fcber Kontaktformulare, Anmeldeformulare und \u00e4hnliche Webseiten auf unseren Webservern an uns leiten, werden nur mit Ihrem Einverst\u00e4ndnis entgegengenommen und dienen ausschlie\u00dflich dem in den Formularen genannten Zweck. Bitte beachten Sie die entsprechenden Hinweise auf den Formularen. </ p > < p > In allen Formularen werden nur die personenbezogenen Daten erhoben, die unbedingt erforderlich sind. \u00dcblicherweise werden die personenbezogenen Daten in einer Datenbank des Leibnitz Rechenzentrums gespeichert und sind den jeweils zust\u00e4ndigen Mitarbeitern der TUM zug\u00e4nglich. Ist der Zweck der Datenerhebung, die Daten auch anderen Mitgliedern der TUM zug\u00e4nglich zu machen, so wird hierbei das Prinzip der Datensparsamkeit beachtet. Ihre Daten werden nicht an Dritte weiteregegeben, es sei denn, dies ist im Formular explizit angegeben. </ p > < p > Soweit Ihre personenbezogenen Daten verarbeitet werden, haben Sie diesbez\u00fcglich im Grundsatz nachfolgende Rechte: </ p > < ul > < li > Auskunft \u00fcber Ihre bei uns gespeicherten Daten und deren Verarbeitung (Art. 15 DSGVO), </ li > < li > Berichtigung/Vervollst\u00e4ndigung unrichtiger personenbezogener Daten (Art. 16 DSGVO), </ li > < li > L\u00f6schung Ihrer bei uns gespeicherten Daten (Art. 17 DSGVO), </ li > < li > Einschr\u00e4nkung der Datenverarbeitung, sofern wir Ihre Daten aufgrund gesetzlicher Pflichten noch nicht l\u00f6schen d\u00fcrfen (Art. 18 DSGVO), </ li > < li > Ggf. ein Recht auf Daten\u00fcbertragbarkeit (Art. 20 DSGVO), </ li > < li > Widerspruch gegen die Verarbeitung Ihrer Daten bei uns (Art. 21 DSGVO). </ li > </ ul > < p > Einschr\u00e4nkungen und Modifikationen der vorgenannten Rechte k\u00f6nnen sich aus Art. 9 und 10 BayDSG sowie aus Art. 20 BayDSG ergeben. </ p > < p > Sofern Sie uns eine Einwilligung erteilt haben, k\u00f6nnen Sie diese jederzeit mit Wirkung f\u00fcr die Zukunft widerrufen. Hierzu wenden Sie sich bitte an it-support (at) tum.de. </ p > < p > Sie k\u00f6nnen sich jederzeit mit einer Beschwerde an die f\u00fcr uns zust\u00e4ndige Aufsichtsbeh\u00f6rde wenden. Die zust\u00e4ndige Datenschutz Aufsichtsbeh\u00f6rde f\u00fcr die Technische Universit\u00e4t M\u00fcnchen ist: </ p > < address >< strong > Der Bayerische Landesbeauftragte f\u00fcr den Datenschutz </ strong >< br > Prof. Dr. Thomas Petri < br > Wagm\u00fcllerstra\u00dfe 18 < br > 80538 M\u00fcnchen < br > E-Mail: poststelle (at) datenschutz-bayern.de < br > Telefon: +49 (0)89 212672-0 < br > < a href = \"https://www.datenschutz-bayern.de\" > https://www.datenschutz-bayern.de </ a ></ address > < p > Der Nutzung von im Rahmen der Impressumspflicht ver\u00f6ffentlichten Kontaktdaten durch Dritte zur \u00dcbersendung von nicht ausdr\u00fccklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdr\u00fccklich widersprochen. Die Betreiber der Seiten behalten sich ausdr\u00fccklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen etwa durch Spam-Mails vor. </ p > < h2 > E-Mail-Sicherheit </ h2 > < p > Informationen, die Sie unverschl\u00fcsselt per elektronischer Post (E-Mail) an uns senden, k\u00f6nnten Dritte m\u00f6glicherweise auf dem \u00dcbertragungsweg lesen. Wir k\u00f6nnen in der Regel Ihre Identit\u00e4t nicht \u00fcberpr\u00fcfen und wissen nicht, wer sich hinter einer E-Mail-Adresse verbirgt. Eine rechtssichere Kommunikation durch einfache E-Mail ist daher nicht gew\u00e4hrleistet. Wir setzen - wie viele E-Mail-Anbieter - Filter gegen unerw\u00fcnschte Werbung (\"SPAM-Filter\") ein, die in seltenen F\u00e4llen auch normale E-Mails f\u00e4lschlicherweise automatisch als unerw\u00fcnschte Werbung einordnen und l\u00f6schen. E-Mails, die sch\u00e4digende Programme (\"Viren\") enthalten, l\u00f6schen wir in jedem Fall automatisch. </ p > < h2 > Cookies </ h2 > < p > Um den Funktionsumfang unseres Internetangebotes zu erweitern und die Nutzung f\u00fcr Sie komfortabler zu gestalten, verwenden wir zum Teil so genannte \"Cookies\". Mit Hilfe dieser Cookies k\u00f6nnen bei dem Aufruf unserer Webseite Daten auf Ihrem Rechner gespeichert werden. Sie k\u00f6nnen das Speichern von Cookies jedoch deaktivieren oder Ihren Browser so einstellen, dass Cookies nur f\u00fcr die Dauer der jeweiligen Verbindung zum Internet gespeichert werden. Hierdurch k\u00f6nnte allerdings der Funktionsumfang unseres Angebotes eingeschr\u00e4nkt werden. </ p > < h2 > Links </ h2 > < p > Von unseren eigenen Inhalten sind Querverweise (\u201eLinks\u201c) auf die Webseiten anderer Anbieter zu unterscheiden. Durch diese Links erm\u00f6glichen wir lediglich den Zugang zur Nutzung fremder Inhalte nach \u00a7 8 Telemediengesetz (TMG). Wir haben keinen Einfluss darauf, dass deren Betreiber die Datenschutzbestimmungen einhalten. F\u00fcr illegale, fehlerhafte oder unvollst\u00e4ndige Inhalte und insbesondere f\u00fcr Sch\u00e4den, die aus der Nutzung oder Nichtnutzung von Informationen Dritter entstehen, haftet allein der jeweilige Anbieter der Seite. </ p > < h2 > Auskunft und Berichtigung </ h2 > < p > Sie haben das Recht, auf schriftlichen Antrag und unentgeltlich Auskunft \u00fcber die personen < U + 00AD > bezogenen Daten zu erhalten, die \u00fcber Sie gespeichert sind. Zus\u00e4tzlich haben Sie das Recht auf Berichtigung unrichtiger Daten, Sperrung und L\u00f6schung. </ p > < address >< strong > Datenschutzbeauftragter der Fakult\u00e4t f\u00fcr Mathematik </ strong >< br > < a href = \"https://campus.tum.de/tumonline/visitenkarte.show_vcard?pPersonenId=EC7C4F2B0019C019&pPersonenGruppe=3\" Dr . Christian Ludwig < br > Boltzmannstra\u00dfe 3 < br > 85748 Garching bei M\u00fcnchen < br > E-Mail: bv.ma (at) datenschutz.tum.de </ address > </ div > < script > if ( window . location . protocol === \"http:\" ) { // unhide http warning var warning = document . getElementById ( 'insecure-login-warning' ); warning . className = warning . className . replace ( /\\bhidden\\b/ , '' ); } </ script > </ body > </ html >","title":"/srv/jupyterhub/venv/share/jupyterhub/static/privacy.html"},{"location":"imprint_privacy/#summary","text":"In this section we extended the jupyterhub login page by links to an imprint and a privacy statement and created the two static html files.","title":"Summary"},{"location":"imprint_privacy/#next-steps","text":"The next step is to connect JupyterHub to the TUM Shibboleth system for authentication.","title":"Next Steps"},{"location":"install_jupyterhub/","text":"Install JupyterHub After the server is set up, it is time to install JupyterHub on the server. Install JupyterHub Update System Install Python Create a virtual environment and install packages Run a very unsecured instance of Jupyter Hub just to see if it works Quick! Log out and shut down JupyterHub Summary Next Steps Update System It is probably best to update the packages installed on the server in case there are updates to the operating system and installed packages since the server was created. Open a terminal, log into the server, then update the system: $ sudo apt update $ sudo apt upgrade Install Python Before we install JupyterHub on the server, we need to install a current version of Python and create a virtual environment. We'll install Python 3.7 following this description for Ubuntu 18.04 and we will use the built-in capabilities for setting up a virtual environment. Then, using the pip package manager, we will install the necessary Python packages and JupyterHub. For an alternative installation using Miniconda , see the original version of this documentation . We start by installing the prerequisites: $ sudo apt install software-properties-common Next, add the deadsnakes PPA to your sources list: $ sudo add-apt-repository ppa:deadsnakes/ppa When prompted press Enter to continue. Once the repository is enabled, install Python 3.7 and the virtual environment packages with: $ sudo apt install python3.7 python3.7-venv At this point, Python 3.7 is installed on your Ubuntu system and ready to be used. You can verify it by typing: $ python3.7 --version Create a virtual environment and install packages For this JupyterHub install, we are going to create a virtual environment and install packages into that environment. We'll call the virtual environment jupyterhub and use python3.7 as our Python version. Then activate the jupyterhub environment and install NumPy , Matplotlib , Pandas and Jupyter . Also don't forget to install xlrd , this package is needed for Pandas to read .xlsx files. Finally, we install JupyterLab and JupyterHub . $ sudo mkdir -p /srv/jupyterhub $ sudo chown -R ritter:tumuser /srv/ $ cd /srv/jupyterhub $ python3.7 -m venv venv $ source ./venv/bin/activate $( venv ) pip install numpy matplotlib pandas xlrd $( venv ) pip install jupyterlab jupyterhub Run a very unsecured instance of Jupyter Hub just to see if it works Before we can actually run JupyterHub, we will need to install configurable-http-proxy that is used by JupyterHub. To do so, follow these steps: $ sudo apt install npm $ sudo npm install -g configurable-http-proxy OK- let's give JupyterHub a whirl. We'll start JupterHub for the first time. Note the --no-ssl flag at the end of the command. This flag needs to be included or you won't be able to browse to the server. Also note we have to have our (jupyterhub) virtual environment active when we run the command. $(venv) jupyterhub --no-ssl We see some output in the terminal window. The last line is something like JupyterHub is now running at http://:8000/ . The first time I set up JupyterHub, I wasn't able to see the site using a web browser. No web page loaded, and the connection timed out. Why? It turns out the firewall blocks port 8000 by default. But JupyterHub runs on port 8000 - it tells us so when JupyterHub starts. So we need to configure ufw to allow connections on port 8000 (at least for now, just to see if JupyterHub works). To allow communication on port 8000 and start JupyterHub, type: $(jupyterhub) sudo ufw allow 8000 # make sure the (jupyterhub) virtual environment is activated $(jupyterhub) jupyterhub --no-ssl Now we can browse to the server appended with :8000 . The web address should look something like: http://m09vm14.ma.tum.de:8000 . Note this only works from inside the department network, from the outside you will have to use a technique like ssh forwarding to connect: $ ssh -i ~/.ssh/jupyterhub_rsa -L8080:localhost:8000 m09vm14.ma.tum.de Then, start a web browser and enter http://localhost:8080. This should show the JupyterHub login screen. The JupyterHub login screen looks like: Awesome! Quick log into JupyterHub using the username and password for the non-root sudo user (in my case ritter ) that was set up earlier with the VM. You should see the typical notebook file browser with all the files you can see when you run ls ~/ . Try creating and running a new Jupyter notebook. The notebook works just like a Jupyter notebook running locally . Quick! Log out and shut down JupyterHub Warning Warning! You should not run JupyterHub without SSL encryption on a public network. Quick! Log out and shut down JupyterHub . (does quick really matter in internet security?) The site is running without any ssl security over regular HTTP not HTTPS. Key in [Ctrl] + [c] to stop JupyterHub. After you have confirmed that JupyterHub works, close off Port 8000 on the server by keying in the following command. $(jupyterhub) sudo ufw deny 8000 $(jupyterhub) sudo ufw status Status: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere 8000 DENY Anywhere OpenSSH (v6) ALLOW Anywhere (v6) 8000 (v6) DENY Anywhere (v6) Summary In this section, we installed Python 3.7 on the server. Next we created a Python 3.7 virtual environment and installed NumPy, Matplotlib, Pandas, xlrd, and Jupyter into it. Then we installed JupyterLab and JupyterHub into the virtual environment. Finally we ran a very un-secure instance of JupyterHub with no SSL encryption to make sure our installation is working. Warning Running JupyterHub without SSL encryption is NOT ADVISED. Next Steps The next step is to acquire SSL certificates for our server.","title":"Install JupyterHub"},{"location":"install_jupyterhub/#install-jupyterhub","text":"After the server is set up, it is time to install JupyterHub on the server. Install JupyterHub Update System Install Python Create a virtual environment and install packages Run a very unsecured instance of Jupyter Hub just to see if it works Quick! Log out and shut down JupyterHub Summary Next Steps","title":"Install JupyterHub"},{"location":"install_jupyterhub/#update-system","text":"It is probably best to update the packages installed on the server in case there are updates to the operating system and installed packages since the server was created. Open a terminal, log into the server, then update the system: $ sudo apt update $ sudo apt upgrade","title":"Update System"},{"location":"install_jupyterhub/#install-python","text":"Before we install JupyterHub on the server, we need to install a current version of Python and create a virtual environment. We'll install Python 3.7 following this description for Ubuntu 18.04 and we will use the built-in capabilities for setting up a virtual environment. Then, using the pip package manager, we will install the necessary Python packages and JupyterHub. For an alternative installation using Miniconda , see the original version of this documentation . We start by installing the prerequisites: $ sudo apt install software-properties-common Next, add the deadsnakes PPA to your sources list: $ sudo add-apt-repository ppa:deadsnakes/ppa When prompted press Enter to continue. Once the repository is enabled, install Python 3.7 and the virtual environment packages with: $ sudo apt install python3.7 python3.7-venv At this point, Python 3.7 is installed on your Ubuntu system and ready to be used. You can verify it by typing: $ python3.7 --version","title":"Install Python"},{"location":"install_jupyterhub/#create-a-virtual-environment-and-install-packages","text":"For this JupyterHub install, we are going to create a virtual environment and install packages into that environment. We'll call the virtual environment jupyterhub and use python3.7 as our Python version. Then activate the jupyterhub environment and install NumPy , Matplotlib , Pandas and Jupyter . Also don't forget to install xlrd , this package is needed for Pandas to read .xlsx files. Finally, we install JupyterLab and JupyterHub . $ sudo mkdir -p /srv/jupyterhub $ sudo chown -R ritter:tumuser /srv/ $ cd /srv/jupyterhub $ python3.7 -m venv venv $ source ./venv/bin/activate $( venv ) pip install numpy matplotlib pandas xlrd $( venv ) pip install jupyterlab jupyterhub","title":"Create a virtual environment and install packages"},{"location":"install_jupyterhub/#run-a-very-unsecured-instance-of-jupyter-hub-just-to-see-if-it-works","text":"Before we can actually run JupyterHub, we will need to install configurable-http-proxy that is used by JupyterHub. To do so, follow these steps: $ sudo apt install npm $ sudo npm install -g configurable-http-proxy OK- let's give JupyterHub a whirl. We'll start JupterHub for the first time. Note the --no-ssl flag at the end of the command. This flag needs to be included or you won't be able to browse to the server. Also note we have to have our (jupyterhub) virtual environment active when we run the command. $(venv) jupyterhub --no-ssl We see some output in the terminal window. The last line is something like JupyterHub is now running at http://:8000/ . The first time I set up JupyterHub, I wasn't able to see the site using a web browser. No web page loaded, and the connection timed out. Why? It turns out the firewall blocks port 8000 by default. But JupyterHub runs on port 8000 - it tells us so when JupyterHub starts. So we need to configure ufw to allow connections on port 8000 (at least for now, just to see if JupyterHub works). To allow communication on port 8000 and start JupyterHub, type: $(jupyterhub) sudo ufw allow 8000 # make sure the (jupyterhub) virtual environment is activated $(jupyterhub) jupyterhub --no-ssl Now we can browse to the server appended with :8000 . The web address should look something like: http://m09vm14.ma.tum.de:8000 . Note this only works from inside the department network, from the outside you will have to use a technique like ssh forwarding to connect: $ ssh -i ~/.ssh/jupyterhub_rsa -L8080:localhost:8000 m09vm14.ma.tum.de Then, start a web browser and enter http://localhost:8080. This should show the JupyterHub login screen. The JupyterHub login screen looks like: Awesome! Quick log into JupyterHub using the username and password for the non-root sudo user (in my case ritter ) that was set up earlier with the VM. You should see the typical notebook file browser with all the files you can see when you run ls ~/ . Try creating and running a new Jupyter notebook. The notebook works just like a Jupyter notebook running locally .","title":"Run a very unsecured instance of Jupyter Hub just to see if it works"},{"location":"install_jupyterhub/#quick-log-out-and-shut-down-jupyterhub","text":"Warning Warning! You should not run JupyterHub without SSL encryption on a public network. Quick! Log out and shut down JupyterHub . (does quick really matter in internet security?) The site is running without any ssl security over regular HTTP not HTTPS. Key in [Ctrl] + [c] to stop JupyterHub. After you have confirmed that JupyterHub works, close off Port 8000 on the server by keying in the following command. $(jupyterhub) sudo ufw deny 8000 $(jupyterhub) sudo ufw status Status: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere 8000 DENY Anywhere OpenSSH (v6) ALLOW Anywhere (v6) 8000 (v6) DENY Anywhere (v6)","title":"Quick! Log out and shut down JupyterHub"},{"location":"install_jupyterhub/#summary","text":"In this section, we installed Python 3.7 on the server. Next we created a Python 3.7 virtual environment and installed NumPy, Matplotlib, Pandas, xlrd, and Jupyter into it. Then we installed JupyterLab and JupyterHub into the virtual environment. Finally we ran a very un-secure instance of JupyterHub with no SSL encryption to make sure our installation is working. Warning Running JupyterHub without SSL encryption is NOT ADVISED.","title":"Summary"},{"location":"install_jupyterhub/#next-steps","text":"The next step is to acquire SSL certificates for our server.","title":"Next Steps"},{"location":"jupyterhub_config/","text":"JupyterHub Configuration Next, we'll create a jupyterhub_config.py file and modify it to include our cookie secret and proxy auth token. JupyterHub Configuration Create jupyterhub_config.py Modify jupyterhub_config.py Optional: Install Jupyterhub Lab Extensions Restart Nginx and start Jupyterhub, see if we can login Summary Next Steps Create jupyterhub_config.py We'll create the JupyterHub config file in the /etc/jupyterhub directory. After the directory is created, we need to modify the directory permissions. Then cd into it create the config file with the command jupyterhub --generate-config . Make sure you are in the (jupyterhub) virtual environment when you run the command. $ cd /etc $ sudo mkdir jupyterhub $ sudo chown -R root:tumuser jupyterhub/ $ sudo chmod -R g+rwx jupyterhub/ $ sudo chmod -R o-rwx jupyterhub/ $ cd jupyterhub $ source /srv/jupyterhub/venv/bin/activate (venv)$ jupyterhub --generate-config (venv)$ ls jupyterhub_config.py Modify jupyterhub_config.py Now we'll modify the jupyterhub_config.py file to allow local spawners and include our user ritter as an admin user: $ nano jupyterhub_config.py There will be a lot of commented out text in the jupyterhub_config.py file. At the top of the file, add the following: # /etc/jupyterhub/jupyterhub_config.py # PAM Authenticator c = get_config () c . JupyterHub . log_level = 10 c . Spawner . cmd = '/srv/jupyterhub/venv/bin/jupyterhub-singleuser' c . Spawner . default_url = '/lab' # optional: switch to lab interface upon login # Cookie Secret Files c . JupyterHub . cookie_secret_file = '/srv/jupyterhub/jupyterhub_cookie_secret' c . ConfigurableHTTPProxy . auth_token = '/srv/jupyterhub/proxy_auth_token' # Users c . Authenticator . whitelist = { 'ritter' } c . Authenticator . admin_users = { 'ritter' } ... Note the optional line c.Spawner.default_url = '/lab' # optional: switch to lab interface upon login This line activates the JuypterLab interface diredtly upon login. You may safely comment it out if you would rather want the classic Jupyter Notebooks interface (which is the default setting). JuypterLabs is still active and a user may manually switch to the new interface through appending /lab to the url. Optional: Install Jupyterhub Lab Extensions If you are planning to use JupyterLab instead of the classic JupyterNotebooks interface, you may install the lab extensions into jupyter hub through the following command: $ cd /srv/jupyterhub $ source /srv/jupyterhub/venv/bin/activate (venv)$ jupyter labextension install @jupyterlab/hub-extension Restart Nginx and start Jupyterhub, see if we can login Now we'll restart Nginx. If it seems like Nginx isn't working, try $ sudo systemctl status nginx and see if Nginx really started. If it didn't, try the command nginx -t . This command prints out any error messages if Nginx failed to start. I had to trouble shoot the Nginx configuration many a lot before I got Nginx and JupyterHub working together. $ sudo systemctl stop nginx $ sudo systemctl start nginx $ sudo systemctl status nginx # [Ctrl]+[c] to exit Once Nginx is running, try to restart JupyterHub without the --no-ssl flag. Make sure the (jupyterhubenv) virtual environment is active before running the jupyterhub command. $ cd /etc/jupyterhub $ source /srv/jupyterhub/venv/bin/activate (jupyterhub)$ jupyterhub Expect to get an error at this point due to the permissions we set for our cookie_secret and proxy_auth_token files. Since these files are set to permissions that only the sudo owner can read and write, running JupyterHub as the user ritter won't work. When JupyterHub starts up, it won't be able to access the cookie_secret and proxy_auth_token files. We will remedy this situation in the next step: running JupyterHub as a system service. The system service will run as root and the permissions we set for the cookie_secret and proxy_auth_token files will not be a problem. Summary In this section we created a jupyterhub_config.py file and included a minimal configuration to use the local PAM authenticator (Linux login usernames and passwords). We restarted Nginx, but could not run JupyterHub because of the permissions set to the cookie_secret and proxy_auth_token files. Next Steps The next step is to run JupyterHub as a system service. This allows JupyterHub to run continuously even if we aren't logged into the server. It also allows us to work on our JupyterHub deployment while it is still running.","title":"JupyterHub Configuration"},{"location":"jupyterhub_config/#jupyterhub-configuration","text":"Next, we'll create a jupyterhub_config.py file and modify it to include our cookie secret and proxy auth token. JupyterHub Configuration Create jupyterhub_config.py Modify jupyterhub_config.py Optional: Install Jupyterhub Lab Extensions Restart Nginx and start Jupyterhub, see if we can login Summary Next Steps","title":"JupyterHub Configuration"},{"location":"jupyterhub_config/#create-jupyterhub_configpy","text":"We'll create the JupyterHub config file in the /etc/jupyterhub directory. After the directory is created, we need to modify the directory permissions. Then cd into it create the config file with the command jupyterhub --generate-config . Make sure you are in the (jupyterhub) virtual environment when you run the command. $ cd /etc $ sudo mkdir jupyterhub $ sudo chown -R root:tumuser jupyterhub/ $ sudo chmod -R g+rwx jupyterhub/ $ sudo chmod -R o-rwx jupyterhub/ $ cd jupyterhub $ source /srv/jupyterhub/venv/bin/activate (venv)$ jupyterhub --generate-config (venv)$ ls jupyterhub_config.py","title":"Create jupyterhub_config.py"},{"location":"jupyterhub_config/#modify-jupyterhub_configpy","text":"Now we'll modify the jupyterhub_config.py file to allow local spawners and include our user ritter as an admin user: $ nano jupyterhub_config.py There will be a lot of commented out text in the jupyterhub_config.py file. At the top of the file, add the following: # /etc/jupyterhub/jupyterhub_config.py # PAM Authenticator c = get_config () c . JupyterHub . log_level = 10 c . Spawner . cmd = '/srv/jupyterhub/venv/bin/jupyterhub-singleuser' c . Spawner . default_url = '/lab' # optional: switch to lab interface upon login # Cookie Secret Files c . JupyterHub . cookie_secret_file = '/srv/jupyterhub/jupyterhub_cookie_secret' c . ConfigurableHTTPProxy . auth_token = '/srv/jupyterhub/proxy_auth_token' # Users c . Authenticator . whitelist = { 'ritter' } c . Authenticator . admin_users = { 'ritter' } ... Note the optional line c.Spawner.default_url = '/lab' # optional: switch to lab interface upon login This line activates the JuypterLab interface diredtly upon login. You may safely comment it out if you would rather want the classic Jupyter Notebooks interface (which is the default setting). JuypterLabs is still active and a user may manually switch to the new interface through appending /lab to the url.","title":"Modify jupyterhub_config.py"},{"location":"jupyterhub_config/#optional-install-jupyterhub-lab-extensions","text":"If you are planning to use JupyterLab instead of the classic JupyterNotebooks interface, you may install the lab extensions into jupyter hub through the following command: $ cd /srv/jupyterhub $ source /srv/jupyterhub/venv/bin/activate (venv)$ jupyter labextension install @jupyterlab/hub-extension","title":"Optional: Install Jupyterhub Lab Extensions"},{"location":"jupyterhub_config/#restart-nginx-and-start-jupyterhub-see-if-we-can-login","text":"Now we'll restart Nginx. If it seems like Nginx isn't working, try $ sudo systemctl status nginx and see if Nginx really started. If it didn't, try the command nginx -t . This command prints out any error messages if Nginx failed to start. I had to trouble shoot the Nginx configuration many a lot before I got Nginx and JupyterHub working together. $ sudo systemctl stop nginx $ sudo systemctl start nginx $ sudo systemctl status nginx # [Ctrl]+[c] to exit Once Nginx is running, try to restart JupyterHub without the --no-ssl flag. Make sure the (jupyterhubenv) virtual environment is active before running the jupyterhub command. $ cd /etc/jupyterhub $ source /srv/jupyterhub/venv/bin/activate (jupyterhub)$ jupyterhub Expect to get an error at this point due to the permissions we set for our cookie_secret and proxy_auth_token files. Since these files are set to permissions that only the sudo owner can read and write, running JupyterHub as the user ritter won't work. When JupyterHub starts up, it won't be able to access the cookie_secret and proxy_auth_token files. We will remedy this situation in the next step: running JupyterHub as a system service. The system service will run as root and the permissions we set for the cookie_secret and proxy_auth_token files will not be a problem.","title":"Restart Nginx and start Jupyterhub, see if we can login"},{"location":"jupyterhub_config/#summary","text":"In this section we created a jupyterhub_config.py file and included a minimal configuration to use the local PAM authenticator (Linux login usernames and passwords). We restarted Nginx, but could not run JupyterHub because of the permissions set to the cookie_secret and proxy_auth_token files.","title":"Summary"},{"location":"jupyterhub_config/#next-steps","text":"The next step is to run JupyterHub as a system service. This allows JupyterHub to run continuously even if we aren't logged into the server. It also allows us to work on our JupyterHub deployment while it is still running.","title":"Next Steps"},{"location":"jupyterlab_default_interface/","text":"JupyterLab Default Interface Over the summer, when I ran JupterHub for the first time, we used the regular Jupyter notebook interface. There is an option when deploying JupyterHub to use the new JupyterLab interface instead. JupyterLab Default Interface JupyterLab Interface Modify jupyterhub_config.py Restart JupyterHub Install JupyterLab extension for JupyterHub Restart JupyterHub Summary JupyterLab Interface Below is the file browser running the regular Jupyter notebook interface. This is what students see now when they log into JupyterHub. But students could also be greeted by the JupyterLab interface after they log in. Luckily, the JupyterLab interface is built right into JupyterHub. We can access the JupyterLab interface by logging into JupyerHub and modifying the URL. Below is the URL when you are logged into the notebook file browser: https://mydomain.org/user/user.name/tree In the URL, if we remove /tree and replace it with /lab the result is the JupyterLab interface. https://mydomain.org/user/user.name/lab The resulting JupyterLab interface is shown below: We can get back to the regular notebook interface by replacing /lab with /tree . The regular Jupyter notebook interface, running a notebook, is shown below: If we switch to the JupyterLab interface, the same notebook looks like this: Modify jupyterhub_config.py To use JupyterLab as the default landing page (instead of the regular notebook interface), add a line to jupyterhub_config.py in the /etc/jupyterhub/ directory. # /etc/jupyterhub/jupyterhub_config.py ... # Start Users at the JupyterLab Interface c . Spawner . default_url = '/lab' ... That's it. It's that easy to switch between the regular notebook and JupyterLab interfaces. Restart JupyterHub After jupyterhub_config.py is saved, let's restart JupyterHub and see the results. $ sudo systemctl stop jupyterhub $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit the status panel When we log into JupyterHub, we are greated by the JupyterLab interface: Install JupyterLab extension for JupyterHub One advantage of the good old classic notebook interface is it contains buttons to login and logout of JupyterHub, and buttons to start and stop our server. Login/logout and server start/stop controls are absent from the JupyterLab interface. Luckily, these controls can be added into JupyterLab with the JupyterHub extension for JupyterLab . To install the JupyterLab extension for JupyterHub, log into the server, then activate the (jupyterhub) virtual environment. The extenion is installed with the command below: $ conda activate jupyterhub (jupyterhub)$ jupyter labextension install @jupyterlab/hub-extension I had to run this command twice to get the extension to install. Don't know why. The first time I ran the command, I was greeted by an error about installing or using yarn . But when I ran it a second time, it worked. To use JupyterLab extension, add a line to jupyterhub_config.py in the /etc/jupyterhub/ directory: # /etc/jupyterhub/jupyterhub_config.py ... # Use the JupyterLab extension for JupyterHub. # install with $ jupyter labextension install @jupyterlab/hub-extension c . Spawner . cmd = [ 'jupyter-labhub' ] ... Restart JupyterHub After jupyterhub_config.py is saved, restart JupyterHub and see the results. $ sudo systemctl stop jupyterhub $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit the status panel When we log into JupyterHub, we see the JupyterLab interface with a new [Hub] menu along the top: If you select [Control Pannel], you end up with same buttons contained in the Jupyter notebook interface. If we [Stop My Server], then re-[Start My Server], we end up back in the JupyterLab interface. Summary The JupyterLab interface is the newest Jupyter notebook interface created by the Jupyter project team. The JupyterLab interface includes a file browser in the left-hand side and the option of splitting up a window to show multiple notebooks. Setting the JupyterLab interface as default is as simple as adding a custom URL to the jupyterhub_config.py file. If JupyterLab is the default interface, it is also helpful to add the JupyterHub extension for the JupyterLab interface. This extension adds the [Stop Server] and [Start Server] buttons to JupyterLab under a [Hub] menu item.","title":"JupyterLab Default Interface"},{"location":"jupyterlab_default_interface/#jupyterlab-default-interface","text":"Over the summer, when I ran JupterHub for the first time, we used the regular Jupyter notebook interface. There is an option when deploying JupyterHub to use the new JupyterLab interface instead. JupyterLab Default Interface JupyterLab Interface Modify jupyterhub_config.py Restart JupyterHub Install JupyterLab extension for JupyterHub Restart JupyterHub Summary","title":"JupyterLab Default Interface"},{"location":"jupyterlab_default_interface/#jupyterlab-interface","text":"Below is the file browser running the regular Jupyter notebook interface. This is what students see now when they log into JupyterHub. But students could also be greeted by the JupyterLab interface after they log in. Luckily, the JupyterLab interface is built right into JupyterHub. We can access the JupyterLab interface by logging into JupyerHub and modifying the URL. Below is the URL when you are logged into the notebook file browser: https://mydomain.org/user/user.name/tree In the URL, if we remove /tree and replace it with /lab the result is the JupyterLab interface. https://mydomain.org/user/user.name/lab The resulting JupyterLab interface is shown below: We can get back to the regular notebook interface by replacing /lab with /tree . The regular Jupyter notebook interface, running a notebook, is shown below: If we switch to the JupyterLab interface, the same notebook looks like this:","title":"JupyterLab Interface"},{"location":"jupyterlab_default_interface/#modify-jupyterhub_configpy","text":"To use JupyterLab as the default landing page (instead of the regular notebook interface), add a line to jupyterhub_config.py in the /etc/jupyterhub/ directory. # /etc/jupyterhub/jupyterhub_config.py ... # Start Users at the JupyterLab Interface c . Spawner . default_url = '/lab' ... That's it. It's that easy to switch between the regular notebook and JupyterLab interfaces.","title":"Modify jupyterhub_config.py"},{"location":"jupyterlab_default_interface/#restart-jupyterhub","text":"After jupyterhub_config.py is saved, let's restart JupyterHub and see the results. $ sudo systemctl stop jupyterhub $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit the status panel When we log into JupyterHub, we are greated by the JupyterLab interface:","title":"Restart JupyterHub"},{"location":"jupyterlab_default_interface/#install-jupyterlab-extension-for-jupyterhub","text":"One advantage of the good old classic notebook interface is it contains buttons to login and logout of JupyterHub, and buttons to start and stop our server. Login/logout and server start/stop controls are absent from the JupyterLab interface. Luckily, these controls can be added into JupyterLab with the JupyterHub extension for JupyterLab . To install the JupyterLab extension for JupyterHub, log into the server, then activate the (jupyterhub) virtual environment. The extenion is installed with the command below: $ conda activate jupyterhub (jupyterhub)$ jupyter labextension install @jupyterlab/hub-extension I had to run this command twice to get the extension to install. Don't know why. The first time I ran the command, I was greeted by an error about installing or using yarn . But when I ran it a second time, it worked. To use JupyterLab extension, add a line to jupyterhub_config.py in the /etc/jupyterhub/ directory: # /etc/jupyterhub/jupyterhub_config.py ... # Use the JupyterLab extension for JupyterHub. # install with $ jupyter labextension install @jupyterlab/hub-extension c . Spawner . cmd = [ 'jupyter-labhub' ] ...","title":"Install JupyterLab extension for JupyterHub"},{"location":"jupyterlab_default_interface/#restart-jupyterhub_1","text":"After jupyterhub_config.py is saved, restart JupyterHub and see the results. $ sudo systemctl stop jupyterhub $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit the status panel When we log into JupyterHub, we see the JupyterLab interface with a new [Hub] menu along the top: If you select [Control Pannel], you end up with same buttons contained in the Jupyter notebook interface. If we [Stop My Server], then re-[Start My Server], we end up back in the JupyterLab interface.","title":"Restart JupyterHub"},{"location":"jupyterlab_default_interface/#summary","text":"The JupyterLab interface is the newest Jupyter notebook interface created by the Jupyter project team. The JupyterLab interface includes a file browser in the left-hand side and the option of splitting up a window to show multiple notebooks. Setting the JupyterLab interface as default is as simple as adding a custom URL to the jupyterhub_config.py file. If JupyterLab is the default interface, it is also helpful to add the JupyterHub extension for the JupyterLab interface. This extension adds the [Stop Server] and [Start Server] buttons to JupyterLab under a [Hub] menu item.","title":"Summary"},{"location":"nbgitpuller_plugin/","text":"nbgitpuller Plugin In this section, we will install, enable and test the nbgitpuller plugin. The nbgitpuller plugin is a JupyterHub extension that pulls down a GitHub repo into each student's JupyterHub environment when students start JupyterHub by clicking on a specific link. The repo for the nbgitpuller plugin is here: https://github.com/jupyterhub/nbgitpuller#constructing-the-nbgitpuller-url The link to the auto-generated URL construction app is here: https://jupyterhub.github.io/nbgitpuller/link Install the nbgitpuller plugin To install the nbgitpuller plugin for JupyterHub, first log into the server and stop JupyterHub. Then activate the (jupyterhub) virtual environment and pip install the plugin. $ sudo systemctl stop jupyterhub $ cd /srv/jupyterhub $ source venv/bin/activate (venv)$ pip install nbgitpuller After the nbgitpuller plugin is installed, the plugin needs to be enabled. (venv)$ jupyter serverextension enable --py nbgitpuller --sys-prefix (venv)$ deactivate After the serverextension enable command, Jupyter will validate the plugin. The output should look something like below: Enabling: nbgitpuller - Writing config: /srv/jupyterhub/venv/etc/jupyter - Validating... nbgitpuller 0.6.1 OK Restart JupyterHub After the plugin is installed and enabled, restart JupyterHub and check the status. $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub [Ctrl]-[c] to exit It's not a bad idea at this point to try and log into JupyterHub with a web browser and make sure everything still works the same as it did before we installed the nbgitpuller extension. Build custom URL Go to the following link to the nbgitpuller URL builder app. https://jupyterhub.github.io/nbgitpuller/link The URL building tool is shown below. Note the assignments-ma4502-S2019.git path shown in the [File to open] text box. Including this path plops students into the assignments-ma4502-S2019.git directory which is the root of the checked out repository when the log into JupyterHub. Go to the custom URL Point a browser to the URL generated by the URL builder. The URL will be something like: https://m09vm14.ma.tum.de/hub/user-redirect/git-pull?repo=https%3A%2F%2Fgithub.com%2Fmichael-ritter%2Fassignments-ma4502-S2019.git&urlpath=lab%2Ftree%2Fassignments-ma4502-S2019%2Fassignments-ma4502-S2019.git%2F First we see the login screen. Once logged in, we see the JupyterLab interface with all the folders and notebooks stored in the GitHub repo we specified. If we open one of the notebooks within JupyterHub, we see the same notebook that is stored on GitHub. The cool thing is that if we modify any of the notes or assignments on GitHub, these modifications will show up when each user logs into JupyterHub. In addition, any files that students create which are not the same file name as files in the GitHub repo will persist on the server. So if a student creates their own file, it stays. But if the instructor upades a file, that update is applied. Pretty neat! Summary In this section we installed the nbgitpuller plugin for JupyterHub. Then we created a custom URL. When we browse to the custom URL, we enter our JupyterHub environment with all the files contained on GitHub placed in our user directory. This is a great plugin to have with JupyterHub. Now when we make changes to the Labs or Assignments in the GitHub Repo, those changes are reflected when students log into JupyterHub with the special URL. Next Steps Next, we'll configure JupyterHub to automatically go the the URL we setup with the nbgitpuller plugin. So when students go to domain.org they get the same files as if they went to the custom plugin URL https://mydomain.org/hub/user-redirect/git-pull?repo=GitHubUserName%2FRepoName&branch=master&app=lab","title":"nbgitpuller Plugin"},{"location":"nbgitpuller_plugin/#nbgitpuller-plugin","text":"In this section, we will install, enable and test the nbgitpuller plugin. The nbgitpuller plugin is a JupyterHub extension that pulls down a GitHub repo into each student's JupyterHub environment when students start JupyterHub by clicking on a specific link. The repo for the nbgitpuller plugin is here: https://github.com/jupyterhub/nbgitpuller#constructing-the-nbgitpuller-url The link to the auto-generated URL construction app is here: https://jupyterhub.github.io/nbgitpuller/link","title":"nbgitpuller Plugin"},{"location":"nbgitpuller_plugin/#install-the-nbgitpuller-plugin","text":"To install the nbgitpuller plugin for JupyterHub, first log into the server and stop JupyterHub. Then activate the (jupyterhub) virtual environment and pip install the plugin. $ sudo systemctl stop jupyterhub $ cd /srv/jupyterhub $ source venv/bin/activate (venv)$ pip install nbgitpuller After the nbgitpuller plugin is installed, the plugin needs to be enabled. (venv)$ jupyter serverextension enable --py nbgitpuller --sys-prefix (venv)$ deactivate After the serverextension enable command, Jupyter will validate the plugin. The output should look something like below: Enabling: nbgitpuller - Writing config: /srv/jupyterhub/venv/etc/jupyter - Validating... nbgitpuller 0.6.1 OK","title":"Install the nbgitpuller plugin"},{"location":"nbgitpuller_plugin/#restart-jupyterhub","text":"After the plugin is installed and enabled, restart JupyterHub and check the status. $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub [Ctrl]-[c] to exit It's not a bad idea at this point to try and log into JupyterHub with a web browser and make sure everything still works the same as it did before we installed the nbgitpuller extension.","title":"Restart JupyterHub"},{"location":"nbgitpuller_plugin/#build-custom-url","text":"Go to the following link to the nbgitpuller URL builder app. https://jupyterhub.github.io/nbgitpuller/link The URL building tool is shown below. Note the assignments-ma4502-S2019.git path shown in the [File to open] text box. Including this path plops students into the assignments-ma4502-S2019.git directory which is the root of the checked out repository when the log into JupyterHub.","title":"Build custom URL"},{"location":"nbgitpuller_plugin/#go-to-the-custom-url","text":"Point a browser to the URL generated by the URL builder. The URL will be something like: https://m09vm14.ma.tum.de/hub/user-redirect/git-pull?repo=https%3A%2F%2Fgithub.com%2Fmichael-ritter%2Fassignments-ma4502-S2019.git&urlpath=lab%2Ftree%2Fassignments-ma4502-S2019%2Fassignments-ma4502-S2019.git%2F First we see the login screen. Once logged in, we see the JupyterLab interface with all the folders and notebooks stored in the GitHub repo we specified. If we open one of the notebooks within JupyterHub, we see the same notebook that is stored on GitHub. The cool thing is that if we modify any of the notes or assignments on GitHub, these modifications will show up when each user logs into JupyterHub. In addition, any files that students create which are not the same file name as files in the GitHub repo will persist on the server. So if a student creates their own file, it stays. But if the instructor upades a file, that update is applied. Pretty neat!","title":"Go to the custom URL"},{"location":"nbgitpuller_plugin/#summary","text":"In this section we installed the nbgitpuller plugin for JupyterHub. Then we created a custom URL. When we browse to the custom URL, we enter our JupyterHub environment with all the files contained on GitHub placed in our user directory. This is a great plugin to have with JupyterHub. Now when we make changes to the Labs or Assignments in the GitHub Repo, those changes are reflected when students log into JupyterHub with the special URL.","title":"Summary"},{"location":"nbgitpuller_plugin/#next-steps","text":"Next, we'll configure JupyterHub to automatically go the the URL we setup with the nbgitpuller plugin. So when students go to domain.org they get the same files as if they went to the custom plugin URL https://mydomain.org/hub/user-redirect/git-pull?repo=GitHubUserName%2FRepoName&branch=master&app=lab","title":"Next Steps"},{"location":"nginx_config/","text":"Nginx Configuration The next step is to modify the Nginx config file so that Nginx routes requests on to JupyterHub. Nginx Configuration Determine number of cores and core limitations Modify nginx.conf Modify sites-available Link sites-available to sites-enabled Test out the new Nginx configuration Summary Next Steps The Nginx configuration step was the hardest part for me when I set up the first JupyterHub server. The Nginx config file isn't Python code or a bash script. I went through many different configurations until I finally got one that worked. The big initial problem was that I copied the sample Nginx config that's up on the JupyterHub docs. But the Nginx config posted on the JupyterHub docs is not a complete Nginx config, it contains just the server portion. I didn't know that the whole server portion needed to be enclosed in another frame. Determine number of cores and core limitations You can determine the number of cores running on your server and what the limits of those cores are with a couple commands. Information about our server's cores will be put in the Nginx configuration later. Usually, you will have requested a four core VM. The first command determines the number of cores on the server: $ grep processor /proc/cpuinfo | wc -l If this command returns 4 then we have 4 core on your server. Then 4 is the number of worker_processes to set in our Nginx configuration The second command determines the core's limitations: $ ulimit -n If this command returns 1024 , then that's the number of worker_connections we should set in our Nginx configuration. Based on the results of these two commands, we will modify the top of the nginx.conf file worker_processes 4; worker_connections 1024; Modify nginx.conf To modify nginx.conf , cd into the /etc/nginx directory. The nginx.conf file should be there along with a couple other files and directories. $ cd /etc/nginx $ ls conf.d koi-utf nginx.conf sites-available ssl fastcgi.conf koi-win proxy_params sites-enabled uwsgi_params fastcgi_params mime.types scgi_params snippets win-utf $ sudo nano nginx.conf At the top of the file, paste in our information about worker_processes and worker_connections user www-data; worker_processes 1; pid /run/nginx.pid; include /etc/nginx/modules-enabled/*.conf; events { worker_connections 1024; # multi_accept on; } ... Close the configuration file (using [Ctrl]+[x], [y]) and restart Nginx. Check the status to make sure Nginx is active $ sudo systemctl restart nginx $ sudo systemctl status nginx You should see that Nginx is activate and running. Modify sites-available For each site served by nginx, there is a configuration file in sites-available that is linked using a symbolic link to the sites-enabled directory. The nginx.conf file shows that it will include /etc/nginx/sites-enabled/* . That directory already contains a default configuration file with entries from Certbot. We start by copying that file over to a new one and then modify it to include the JupyterHub settings. $ cd /etc/nginx/sites-available $ sudo cp default jupyterhub $ sudo nano /etc/nginx/sites-available/jupyterhub Leave the server block at the end intact (redirecting all http traffic to https), it should look something like this: server { if ($host = m09vm14.ma.tum.de) { return 301 https://$host$request_uri; } # managed by Certbot listen 80 ; listen [::]:80 ; server_name m09vm14.ma.tum.de; return 404; # managed by Certbot } Remove any other server blocks that contain a listen 80 statement. There is also a server block with a listen 443 statement that ends with the following lines: listen [::]:443 ssl ipv6only=on; # managed by Certbot listen 443 ssl; # managed by Certbot ssl_certificate /etc/letsencrypt/live/m09vm14.ma.tum.de/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/m09vm14.ma.tum.de/privkey.pem; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot Remove everything else from that server block, then add the following lines: location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-NginX-Proxy true; #proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; } location ~ /.well-known { allow all; } Save and close the `/etc/nginx/sites-available/jupyterhub file. Link sites-available to sites-enabled Now that we have a jupyterhub server configuration in the sites-available directory, we need to create a symbolic link to the sites-enabled directory so the server blocks we wrote will be run by Nginx. To create the symbolic link, use the command below: $ sudo ln -s /etc/nginx/sites-available/jupyterhub /etc/nginx/sites-enabled Finally, remove the default site: $ sudo rm /etc/nginx/sites-enable/default Test out the new Nginx configuration OK, fingers crossed... Now we are going to check if our Nginx configuration is valid and works correctly. First we can check for configuration errors with the command below: $ sudo nginx -t What we are looking for is output like below. If there are any errors, you need to go back and trouble shoot the Nginx configuration. nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful Now restart Nginx and take a look at the status. $ sudo systemctl restart nginx $ sudo systemctl status nginx # [Ctrl]+[c] to exit We are looking for something like: Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2019-02-07 00:40:10 UTC; 7s ago Now browse to the domain name we added to the server. If you use http://m09vm4.ma.tum.de you should be re-directed to https://m09vm4.ma.tum.de . Since JupyterHub isn't hooked up to Nginx yet, you should see a 502 Bad Gateway Error. But that error should show nginx in the error text. Summary In this section we modified the nginx.conf file and created a server configuration in /etc/nginx/sites-available . Then we created a symbolic link from the file in sites-available to sites-enabled and disabled the standard nginx site. Then we checked the Nginx configuration was valid and restarted Nginx. Next Steps The next step is to configure JupyterHub by creating and modifying a jupyterhub_config.py file.","title":"Nginx Configuration"},{"location":"nginx_config/#nginx-configuration","text":"The next step is to modify the Nginx config file so that Nginx routes requests on to JupyterHub. Nginx Configuration Determine number of cores and core limitations Modify nginx.conf Modify sites-available Link sites-available to sites-enabled Test out the new Nginx configuration Summary Next Steps The Nginx configuration step was the hardest part for me when I set up the first JupyterHub server. The Nginx config file isn't Python code or a bash script. I went through many different configurations until I finally got one that worked. The big initial problem was that I copied the sample Nginx config that's up on the JupyterHub docs. But the Nginx config posted on the JupyterHub docs is not a complete Nginx config, it contains just the server portion. I didn't know that the whole server portion needed to be enclosed in another frame.","title":"Nginx Configuration"},{"location":"nginx_config/#determine-number-of-cores-and-core-limitations","text":"You can determine the number of cores running on your server and what the limits of those cores are with a couple commands. Information about our server's cores will be put in the Nginx configuration later. Usually, you will have requested a four core VM. The first command determines the number of cores on the server: $ grep processor /proc/cpuinfo | wc -l If this command returns 4 then we have 4 core on your server. Then 4 is the number of worker_processes to set in our Nginx configuration The second command determines the core's limitations: $ ulimit -n If this command returns 1024 , then that's the number of worker_connections we should set in our Nginx configuration. Based on the results of these two commands, we will modify the top of the nginx.conf file worker_processes 4; worker_connections 1024;","title":"Determine number of cores and core limitations"},{"location":"nginx_config/#modify-nginxconf","text":"To modify nginx.conf , cd into the /etc/nginx directory. The nginx.conf file should be there along with a couple other files and directories. $ cd /etc/nginx $ ls conf.d koi-utf nginx.conf sites-available ssl fastcgi.conf koi-win proxy_params sites-enabled uwsgi_params fastcgi_params mime.types scgi_params snippets win-utf $ sudo nano nginx.conf At the top of the file, paste in our information about worker_processes and worker_connections user www-data; worker_processes 1; pid /run/nginx.pid; include /etc/nginx/modules-enabled/*.conf; events { worker_connections 1024; # multi_accept on; } ... Close the configuration file (using [Ctrl]+[x], [y]) and restart Nginx. Check the status to make sure Nginx is active $ sudo systemctl restart nginx $ sudo systemctl status nginx You should see that Nginx is activate and running.","title":"Modify nginx.conf"},{"location":"nginx_config/#modify-sites-available","text":"For each site served by nginx, there is a configuration file in sites-available that is linked using a symbolic link to the sites-enabled directory. The nginx.conf file shows that it will include /etc/nginx/sites-enabled/* . That directory already contains a default configuration file with entries from Certbot. We start by copying that file over to a new one and then modify it to include the JupyterHub settings. $ cd /etc/nginx/sites-available $ sudo cp default jupyterhub $ sudo nano /etc/nginx/sites-available/jupyterhub Leave the server block at the end intact (redirecting all http traffic to https), it should look something like this: server { if ($host = m09vm14.ma.tum.de) { return 301 https://$host$request_uri; } # managed by Certbot listen 80 ; listen [::]:80 ; server_name m09vm14.ma.tum.de; return 404; # managed by Certbot } Remove any other server blocks that contain a listen 80 statement. There is also a server block with a listen 443 statement that ends with the following lines: listen [::]:443 ssl ipv6only=on; # managed by Certbot listen 443 ssl; # managed by Certbot ssl_certificate /etc/letsencrypt/live/m09vm14.ma.tum.de/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/m09vm14.ma.tum.de/privkey.pem; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot Remove everything else from that server block, then add the following lines: location / { proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-NginX-Proxy true; #proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; } location ~ /.well-known { allow all; } Save and close the `/etc/nginx/sites-available/jupyterhub file.","title":"Modify sites-available"},{"location":"nginx_config/#link-sites-available-to-sites-enabled","text":"Now that we have a jupyterhub server configuration in the sites-available directory, we need to create a symbolic link to the sites-enabled directory so the server blocks we wrote will be run by Nginx. To create the symbolic link, use the command below: $ sudo ln -s /etc/nginx/sites-available/jupyterhub /etc/nginx/sites-enabled Finally, remove the default site: $ sudo rm /etc/nginx/sites-enable/default","title":"Link sites-available to sites-enabled"},{"location":"nginx_config/#test-out-the-new-nginx-configuration","text":"OK, fingers crossed... Now we are going to check if our Nginx configuration is valid and works correctly. First we can check for configuration errors with the command below: $ sudo nginx -t What we are looking for is output like below. If there are any errors, you need to go back and trouble shoot the Nginx configuration. nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful Now restart Nginx and take a look at the status. $ sudo systemctl restart nginx $ sudo systemctl status nginx # [Ctrl]+[c] to exit We are looking for something like: Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2019-02-07 00:40:10 UTC; 7s ago Now browse to the domain name we added to the server. If you use http://m09vm4.ma.tum.de you should be re-directed to https://m09vm4.ma.tum.de . Since JupyterHub isn't hooked up to Nginx yet, you should see a 502 Bad Gateway Error. But that error should show nginx in the error text.","title":"Test out the new Nginx configuration"},{"location":"nginx_config/#summary","text":"In this section we modified the nginx.conf file and created a server configuration in /etc/nginx/sites-available . Then we created a symbolic link from the file in sites-available to sites-enabled and disabled the standard nginx site. Then we checked the Nginx configuration was valid and restarted Nginx.","title":"Summary"},{"location":"nginx_config/#next-steps","text":"The next step is to configure JupyterHub by creating and modifying a jupyterhub_config.py file.","title":"Next Steps"},{"location":"nginx_install/","text":"Install Nginx Now that the server is set up, the next step is to install Nginx and modify our ufw firewall settings. Install Nginx Add the Nginx app to ufw Summary Next Steps Nginx is an open-source web server that can handle many concurrent web connections at the same time. Use terminal and ssh to connect to the server with the non-root sudo user ritter . Once logged in, we can update the system and install Nginx. $ sudo apt update $ sudo apt upgrade $ sudo apt install nginx Add the Nginx app to ufw Earlier, we have configured the firewall ufw . Check out which apps the ufw firewall can work with: $ sudo ufw app list We see a list of available ufw configurations to work with Nginx: Available applications: Nginx Full Nginx HTTP Nginx HTTPS OpenSSH We want to allow in both http and https requests. Once a http request comes in, we'll use Nginx to convert the http connection to a https connection. Select 'Nginx Full' . Note the C apitalization in the command: $ sudo ufw allow 'Nginx Full' We can check out which ports ufw is allowing through with: $ sudo ufw status Note the output shows ufw allows Nginx Full. We opened port 8000 earlier, so we could see how JupyterHub works without a domain name or SSL. Once we get Nginx running and hooked up to JupyterHub, we need to remember to close off port 8000 in ufw. We also need to make sure the Port 80 is open to tcp traffic. If Nginx doesn't seem to be working correctly, it may be because ufw isn't allowing traffic in. In that case try $ sudo ufw allow 80/tcp Nginx will start running as soon at it is installed. We can see the status with: $ sudo systemctl status nginx In the output, we should see something like below. This mean Nginx is running. Key in [ctrl-c] to exit the status dashboard. Active: active (running) since Thu 2018-05-17 04:51:16 UTC; 15min ago Main PID: 17126 (nginx) CGroup: /system.slice/nginx.service \u251c\u2500\u2500 17126 nginx: master process /usr/sbin/nginx -g daemon on; master_pr \u2514\u2500\u2500 17127 nginx: worker process Now we can browse over to the domain m09vm14.ma.tum.de and see the Nginx start page. Summary If this section we installed Nginx on the server and confirmed that it is activate and running. We also changed the rules of our ufw firewall to allow Nginx Full traffic access. If it doesn't seem like Nginx is working right, it might be because ufw is not allowing traffic in over Port 80. Opening Port 80 may solve the problem. Next Steps Now that Nginx is installed, the next step is to configure Nginx to obtain an SSL certificate from Let's Encrypt using certbot and run as a reverse proxy for our JupyterHub server.","title":"Install Nginx"},{"location":"nginx_install/#install-nginx","text":"Now that the server is set up, the next step is to install Nginx and modify our ufw firewall settings. Install Nginx Add the Nginx app to ufw Summary Next Steps Nginx is an open-source web server that can handle many concurrent web connections at the same time. Use terminal and ssh to connect to the server with the non-root sudo user ritter . Once logged in, we can update the system and install Nginx. $ sudo apt update $ sudo apt upgrade $ sudo apt install nginx","title":"Install Nginx"},{"location":"nginx_install/#add-the-nginx-app-to-ufw","text":"Earlier, we have configured the firewall ufw . Check out which apps the ufw firewall can work with: $ sudo ufw app list We see a list of available ufw configurations to work with Nginx: Available applications: Nginx Full Nginx HTTP Nginx HTTPS OpenSSH We want to allow in both http and https requests. Once a http request comes in, we'll use Nginx to convert the http connection to a https connection. Select 'Nginx Full' . Note the C apitalization in the command: $ sudo ufw allow 'Nginx Full' We can check out which ports ufw is allowing through with: $ sudo ufw status Note the output shows ufw allows Nginx Full. We opened port 8000 earlier, so we could see how JupyterHub works without a domain name or SSL. Once we get Nginx running and hooked up to JupyterHub, we need to remember to close off port 8000 in ufw. We also need to make sure the Port 80 is open to tcp traffic. If Nginx doesn't seem to be working correctly, it may be because ufw isn't allowing traffic in. In that case try $ sudo ufw allow 80/tcp Nginx will start running as soon at it is installed. We can see the status with: $ sudo systemctl status nginx In the output, we should see something like below. This mean Nginx is running. Key in [ctrl-c] to exit the status dashboard. Active: active (running) since Thu 2018-05-17 04:51:16 UTC; 15min ago Main PID: 17126 (nginx) CGroup: /system.slice/nginx.service \u251c\u2500\u2500 17126 nginx: master process /usr/sbin/nginx -g daemon on; master_pr \u2514\u2500\u2500 17127 nginx: worker process Now we can browse over to the domain m09vm14.ma.tum.de and see the Nginx start page.","title":"Add the Nginx app to ufw"},{"location":"nginx_install/#summary","text":"If this section we installed Nginx on the server and confirmed that it is activate and running. We also changed the rules of our ufw firewall to allow Nginx Full traffic access. If it doesn't seem like Nginx is working right, it might be because ufw is not allowing traffic in over Port 80. Opening Port 80 may solve the problem.","title":"Summary"},{"location":"nginx_install/#next-steps","text":"Now that Nginx is installed, the next step is to configure Nginx to obtain an SSL certificate from Let's Encrypt using certbot and run as a reverse proxy for our JupyterHub server.","title":"Next Steps"},{"location":"periodic_maintenance/","text":"Periodic Maintenance After running JupyterHub for two quarters, there are a couple lessons I've learned about maintenance. Increase server size before class starts Right at the beginning of class, when everyone logs in, the server can get overloaded. So during only class times when 24 students plus 1 instructor will all be logged into the JupyterHub server at the same time, boost the server size to a $40/month or maybe even up to an $80/month server. You can update the server size at the Digital Ocean Dashboard, but the server has to be shut down first at the command line. $ sudo systemctl stop jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit $ sudo systemctl stop nginx $ sudo systemctl status nginx # [Ctrl]+[c] to exit $ sudo shutdown -h now Log onto Digital Ocean and select the project and server running JupyterHub. Make sure the \"power slider\" is set to [off]. Then select the $80/month server and click [Upgrade Server]. Now many students should be able to log in and run JupyterHub at the same time. After the server restarts, Nginx and JupyterHub have to be restared as well. Key in the following commands after the server size is increased and the \"power slider\" is set to [on]. $ sudo systemctl start nginx $ sudo systemctl status nginx # [Ctrl]+[c] to exit $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit Remeber to drop the server size back down after class ends. You don't want to rack up a huge bill with Digital Ocean. During the rest of the regular week (not during class time), the server can be smaller and cheaper becuase only a few users at a time will be logged in at the same time. Restart server once a week The Hub seems to get sluggish when it has been running for a long time continously. Shutting the down JupyterHub, Nginx, then restarting the server once each week seems like a good idea. To restart the server, first log into JupyterHub and shut down all the student servers. Then from the command line, run: $ sudo systemctl stop jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit $ sudo systemctl stop nginx $ sudo systemctl status nginx # [Ctrl]+[c] to exit $ sudo shutdown -h now Then go to the Digital Ocean dashboard and restart the server. After the server restarts, restart nginx then JupyterHub. $ sudo systemctl start nginx $ sudo systemctl status nginx $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub Extras There are a couple extra docs pages. Browse through these if you want to use the JupyterLab interface, include a GitHub in the JupyterLab interface or try and make the regular domain name go to the nbgitpuller domain name.","title":"Periodic Maintenance"},{"location":"periodic_maintenance/#periodic-maintenance","text":"After running JupyterHub for two quarters, there are a couple lessons I've learned about maintenance.","title":"Periodic Maintenance"},{"location":"periodic_maintenance/#increase-server-size-before-class-starts","text":"Right at the beginning of class, when everyone logs in, the server can get overloaded. So during only class times when 24 students plus 1 instructor will all be logged into the JupyterHub server at the same time, boost the server size to a $40/month or maybe even up to an $80/month server. You can update the server size at the Digital Ocean Dashboard, but the server has to be shut down first at the command line. $ sudo systemctl stop jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit $ sudo systemctl stop nginx $ sudo systemctl status nginx # [Ctrl]+[c] to exit $ sudo shutdown -h now Log onto Digital Ocean and select the project and server running JupyterHub. Make sure the \"power slider\" is set to [off]. Then select the $80/month server and click [Upgrade Server]. Now many students should be able to log in and run JupyterHub at the same time. After the server restarts, Nginx and JupyterHub have to be restared as well. Key in the following commands after the server size is increased and the \"power slider\" is set to [on]. $ sudo systemctl start nginx $ sudo systemctl status nginx # [Ctrl]+[c] to exit $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit Remeber to drop the server size back down after class ends. You don't want to rack up a huge bill with Digital Ocean. During the rest of the regular week (not during class time), the server can be smaller and cheaper becuase only a few users at a time will be logged in at the same time.","title":"Increase server size before class starts"},{"location":"periodic_maintenance/#restart-server-once-a-week","text":"The Hub seems to get sluggish when it has been running for a long time continously. Shutting the down JupyterHub, Nginx, then restarting the server once each week seems like a good idea. To restart the server, first log into JupyterHub and shut down all the student servers. Then from the command line, run: $ sudo systemctl stop jupyterhub $ sudo systemctl status jupyterhub # [Ctrl]+[c] to exit $ sudo systemctl stop nginx $ sudo systemctl status nginx # [Ctrl]+[c] to exit $ sudo shutdown -h now Then go to the Digital Ocean dashboard and restart the server. After the server restarts, restart nginx then JupyterHub. $ sudo systemctl start nginx $ sudo systemctl status nginx $ sudo systemctl start jupyterhub $ sudo systemctl status jupyterhub","title":"Restart server once a week"},{"location":"periodic_maintenance/#extras","text":"There are a couple extra docs pages. Browse through these if you want to use the JupyterLab interface, include a GitHub in the JupyterLab interface or try and make the regular domain name go to the nbgitpuller domain name.","title":"Extras"},{"location":"server_setup/","text":"Set Up the Virtual Machine To start the JupyterHub deployment process, we need to set up an Ubuntu 18.04 server and configure key login. Set Up the Virtual Machine Add an SSH Key Log into the server over SSH Setting up a new user Configuring the firewall Next Steps Add an SSH Key The public SSH key we created needs to be added to the list of authorized keys for login to our server. To do this, open a terminal and enter the following commands (we will assume the server is called m09vm14.ma.tum.de and accessible from the network you are in): ssh m09vm14.ma.tum.de mkdir ~/.ssh cd ~/.ssh vim authorized_keys This will open the vim editor with the file authorized_keys . Press the button i to enter insert mode, paste the contents of the clipboard (the public key), then press esc and :wq to save the file and quit vim. Note the IP address of the new droplet. We need to IP address to log into our server with PuTTY. Copy the IP address of the droplet to the clipboard. Log into the server over SSH Open a terminal and enter the following command to see if you can connect to the server: ssh -i ~/.ssh/jupyterhub_rsa ritter@m09vm14.ma.tum.de You should now see the server prompt as user ritter . First, let's make sure everything is up to date: $ sudo apt update $ sudo apt upgrade Setting up a new user If you want to set up additional users at this point, you may do so with the adduser command. I called my new user peter . $ adduser peter Set a new password and confirm: Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully The user details can be skipped by pressing [Enter]. Then [Y] to complete the new user setup. Changing the user information for username Enter the new value, or press ENTER for the default Full Name []: Room Number []: Work Phone []: Home Phone []: Other []: Is the information correct? [Y/n] Now let's give our new user sudo privileges: $ usermod -aG sudo peter The new user account is created and the new user has sudo privileges. We can switch accounts and become the new user with: $ sudo su - peter The new user peter should have sudo privileges. This means when acting as peter we should be able to look in the /root directory. $ sudo ls -la /root If you can see the contents of /root , then the new user peter is set up with sudo access. To exit out of the new sudo user's profile, and get back to using the ritter profile, type exit at the prompt. Finally, log out by entering the following command: $ exit Configuring the firewall Next, we need to open the ufw firewall to OpenSSH traffic. We we'll communicate with the server over SSH and need the ufw firewall to allow this type of communication through. While we're at it, let's also open ports 80 and 443 for http and https communications. $ sudo ufw ddefault eny incoming $ sudo ufw default allow outgoing $ sudo ufw allow ssh $ sudo ufw allow http $ sudo ufw allow https $ sudo ufw enable $ sudo ufw status We can see that ports 22, 80 and 443 are allowed. Status: active To Action From -- ------ ---- 22/tcp ALLOW Anywhere 80/tcp ALLOW Anywhere 443/tcp ALLOW Anywhere 22/tcp (v6) ALLOW Anywhere (v6) 80/tcp (v6) ALLOW Anywhere (v6) 443/tcp (v6) ALLOW Anywhere (v6) Now we can exit out of the ritter profile. This terminates the SSH session. $ exit Next Steps The next step is to install Python and JupyterHub on the server. In particular, we will create a virtual environment, and install JupyterHub into the virtual environment.","title":"Server Setup"},{"location":"server_setup/#set-up-the-virtual-machine","text":"To start the JupyterHub deployment process, we need to set up an Ubuntu 18.04 server and configure key login. Set Up the Virtual Machine Add an SSH Key Log into the server over SSH Setting up a new user Configuring the firewall Next Steps","title":"Set Up the Virtual Machine"},{"location":"server_setup/#add-an-ssh-key","text":"The public SSH key we created needs to be added to the list of authorized keys for login to our server. To do this, open a terminal and enter the following commands (we will assume the server is called m09vm14.ma.tum.de and accessible from the network you are in): ssh m09vm14.ma.tum.de mkdir ~/.ssh cd ~/.ssh vim authorized_keys This will open the vim editor with the file authorized_keys . Press the button i to enter insert mode, paste the contents of the clipboard (the public key), then press esc and :wq to save the file and quit vim. Note the IP address of the new droplet. We need to IP address to log into our server with PuTTY. Copy the IP address of the droplet to the clipboard.","title":"Add an SSH Key"},{"location":"server_setup/#log-into-the-server-over-ssh","text":"Open a terminal and enter the following command to see if you can connect to the server: ssh -i ~/.ssh/jupyterhub_rsa ritter@m09vm14.ma.tum.de You should now see the server prompt as user ritter . First, let's make sure everything is up to date: $ sudo apt update $ sudo apt upgrade","title":"Log into the server over SSH"},{"location":"server_setup/#setting-up-a-new-user","text":"If you want to set up additional users at this point, you may do so with the adduser command. I called my new user peter . $ adduser peter Set a new password and confirm: Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully The user details can be skipped by pressing [Enter]. Then [Y] to complete the new user setup. Changing the user information for username Enter the new value, or press ENTER for the default Full Name []: Room Number []: Work Phone []: Home Phone []: Other []: Is the information correct? [Y/n] Now let's give our new user sudo privileges: $ usermod -aG sudo peter The new user account is created and the new user has sudo privileges. We can switch accounts and become the new user with: $ sudo su - peter The new user peter should have sudo privileges. This means when acting as peter we should be able to look in the /root directory. $ sudo ls -la /root If you can see the contents of /root , then the new user peter is set up with sudo access. To exit out of the new sudo user's profile, and get back to using the ritter profile, type exit at the prompt. Finally, log out by entering the following command: $ exit","title":"Setting up a new user"},{"location":"server_setup/#configuring-the-firewall","text":"Next, we need to open the ufw firewall to OpenSSH traffic. We we'll communicate with the server over SSH and need the ufw firewall to allow this type of communication through. While we're at it, let's also open ports 80 and 443 for http and https communications. $ sudo ufw ddefault eny incoming $ sudo ufw default allow outgoing $ sudo ufw allow ssh $ sudo ufw allow http $ sudo ufw allow https $ sudo ufw enable $ sudo ufw status We can see that ports 22, 80 and 443 are allowed. Status: active To Action From -- ------ ---- 22/tcp ALLOW Anywhere 80/tcp ALLOW Anywhere 443/tcp ALLOW Anywhere 22/tcp (v6) ALLOW Anywhere (v6) 80/tcp (v6) ALLOW Anywhere (v6) 443/tcp (v6) ALLOW Anywhere (v6) Now we can exit out of the ritter profile. This terminates the SSH session. $ exit","title":"Configuring the firewall"},{"location":"server_setup/#next-steps","text":"The next step is to install Python and JupyterHub on the server. In particular, we will create a virtual environment, and install JupyterHub into the virtual environment.","title":"Next Steps"},{"location":"setup_and_tools/","text":"Set Up and Tools In this section, we'll review the tools we need to install locally get JupyterHub running on a remote sever. Set Up and Tools File Locations and Directory Structure Development tools OpenSSL Python Editors Digital Ocean Summary Next Steps Before we launch into the server setup, let's quick review where certain files are going to go on the JupyterHub remote server. File Locations and Directory Structure According to the JuptyerHub docs : The folks at JupyterHub recommend that we put all of the files used by JupyterHub on the server into standard UNIX filesystem locations: /srv/jupyterhub for all security and runtime files /etc/jupyterhub for all configuration files /var/log for log files Development tools OpenSSL Before we create the remote server, a set of private/public SSH keys are needed. SSH keys can be created with OpenSSL which is commonly installed on any unix-like system. Python Editors I use a couple of different Python code editors. My favorites are Emacs and PyCharm , but Visual Studio Code is also a good choice. You can download and install Visual Studio Code here . PyCharm has a community edition which is free, and a professional version which requires a license. Digital Ocean This JupyterHub deployment runs on a Virtual Machine set up by the local \"Rechnerbetriebsgruppe\". Request a server with maximum CPUs and RAM running the latest Ubuntu LTS (18.04 was current at the time of writing this). Details on the registration process are available at the VM wiki page . Summary JupyterHub has a set of standard file locations where we will put our configuration and runtime files. Next Steps The next step is to create a public-private SSH key pair with openssl. We'll use this public-private SSH key to log into the server with ssh.","title":"Set Up and Tools"},{"location":"setup_and_tools/#set-up-and-tools","text":"In this section, we'll review the tools we need to install locally get JupyterHub running on a remote sever. Set Up and Tools File Locations and Directory Structure Development tools OpenSSL Python Editors Digital Ocean Summary Next Steps Before we launch into the server setup, let's quick review where certain files are going to go on the JupyterHub remote server.","title":"Set Up and Tools"},{"location":"setup_and_tools/#file-locations-and-directory-structure","text":"According to the JuptyerHub docs : The folks at JupyterHub recommend that we put all of the files used by JupyterHub on the server into standard UNIX filesystem locations: /srv/jupyterhub for all security and runtime files /etc/jupyterhub for all configuration files /var/log for log files","title":"File Locations and Directory Structure"},{"location":"setup_and_tools/#development-tools","text":"","title":"Development tools"},{"location":"setup_and_tools/#openssl","text":"Before we create the remote server, a set of private/public SSH keys are needed. SSH keys can be created with OpenSSL which is commonly installed on any unix-like system.","title":"OpenSSL"},{"location":"setup_and_tools/#python-editors","text":"I use a couple of different Python code editors. My favorites are Emacs and PyCharm , but Visual Studio Code is also a good choice. You can download and install Visual Studio Code here . PyCharm has a community edition which is free, and a professional version which requires a license.","title":"Python Editors"},{"location":"setup_and_tools/#digital-ocean","text":"This JupyterHub deployment runs on a Virtual Machine set up by the local \"Rechnerbetriebsgruppe\". Request a server with maximum CPUs and RAM running the latest Ubuntu LTS (18.04 was current at the time of writing this). Details on the registration process are available at the VM wiki page .","title":"Digital Ocean"},{"location":"setup_and_tools/#summary","text":"JupyterHub has a set of standard file locations where we will put our configuration and runtime files.","title":"Summary"},{"location":"setup_and_tools/#next-steps","text":"The next step is to create a public-private SSH key pair with openssl. We'll use this public-private SSH key to log into the server with ssh.","title":"Next Steps"},{"location":"shutdown/","text":"Shutting Down JupyterHub When the course and the quarter end, it is time to shut down the JupyterHub server (it's not free..). This is the last step running a JupyterHub server. Shutting Down JupyterHub Summary Summary We shut down JupyterHub and saved all of the student data to a local folder. We also saved the log files so that we can possibly mine some meangingful conclusions from our quarter running JupyterHub.","title":"Shutdown"},{"location":"shutdown/#shutting-down-jupyterhub","text":"When the course and the quarter end, it is time to shut down the JupyterHub server (it's not free..). This is the last step running a JupyterHub server. Shutting Down JupyterHub Summary","title":"Shutting Down JupyterHub"},{"location":"shutdown/#summary","text":"We shut down JupyterHub and saved all of the student data to a local folder. We also saved the log files so that we can possibly mine some meangingful conclusions from our quarter running JupyterHub.","title":"Summary"},{"location":"ssh_keys/","text":"Create SSH keys SSH keys allow us to log into the virtual machine server which will run JupyterHub. SSH keys come in pairs, a private key and a public key. The public key will be stored on the JupyterHub cloud server and the private key will stay on our local machine. Create SSH keys Create SSH keys through openssl Summary Next Steps Create SSH keys through openssl Open a terminal and enter the following command: cd ~/.ssh ssh-keygen -b4096 -trsa -f jupyterhub_rsa We are using the following parameters: Type of key to generate: RSA Number of bits in generated key: 4096 Filename for the keys to be generated: jupyterhub_rsa (private key) and jupyterhub_rsa.pub (public key) We need the public key contents available to paste into the server's SSH authorized_keys file, so copy the contents of that file into the clipboard. Copy all of the contents of the public SSH key including the ssh-rsa line. Summary After completing these steps, we have a public and private SSH key pair saved in ~/.ssh/jupyterhub_rsa . We also have the contents of the public SSH key saved to the clipboard. Next Steps Next, we'll install the SSH keys we just created on our virtual machine and use the private key to log into the server.","title":"SSH Keys"},{"location":"ssh_keys/#create-ssh-keys","text":"SSH keys allow us to log into the virtual machine server which will run JupyterHub. SSH keys come in pairs, a private key and a public key. The public key will be stored on the JupyterHub cloud server and the private key will stay on our local machine. Create SSH keys Create SSH keys through openssl Summary Next Steps","title":"Create SSH keys"},{"location":"ssh_keys/#create-ssh-keys-through-openssl","text":"Open a terminal and enter the following command: cd ~/.ssh ssh-keygen -b4096 -trsa -f jupyterhub_rsa We are using the following parameters: Type of key to generate: RSA Number of bits in generated key: 4096 Filename for the keys to be generated: jupyterhub_rsa (private key) and jupyterhub_rsa.pub (public key) We need the public key contents available to paste into the server's SSH authorized_keys file, so copy the contents of that file into the clipboard. Copy all of the contents of the public SSH key including the ssh-rsa line.","title":"Create SSH keys through openssl"},{"location":"ssh_keys/#summary","text":"After completing these steps, we have a public and private SSH key pair saved in ~/.ssh/jupyterhub_rsa . We also have the contents of the public SSH key saved to the clipboard.","title":"Summary"},{"location":"ssh_keys/#next-steps","text":"Next, we'll install the SSH keys we just created on our virtual machine and use the private key to log into the server.","title":"Next Steps"},{"location":"ssl_certificates/","text":"Obtain SSL Certificates Now that nginx is running on our JupyterHub server, we'll be able to obtain an SSL certificate and run JupyterHub over https. I followed the instructions on https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx to install Certbot , a program used to generate SSL certificates from Let's Encrypt . Obtain SSL Certificates Install Certbot Run Certbot Test the nginx Installation with HTTPS Summary Next Steps Install Certbot We'll use Certbot to obtain a standalone SSL certificate. Log onto the server with ssh in a terminal window. Certbot will need to communicate over the network, so before we run Certbot, we need to open up Port 80 using the ufw firewall utility (if you have not done so already). $ sudo ufw allow 80 First, we will install Certbot from the PPA maintained by Let's Encrypt: $ sudo apt update $ sudo apt install software-properties-common $ sudo add-apt-repository universe $ sudo add-apt-repository ppa:certbot/certbot $ sudo apt update $ sudo apt install certbot python-certbot-nginx Run Certbot Next, we run Certbot to obtain a certificate and automatically change the nginx configuration to use that certificate: $ sudo certbot --nginx The script will ask you for your email address so that you may receive renewal and security notices: Saving debug log to /var/log/letsencrypt/letsencrypt.log Plugins selected: Authenticator nginx, Installer nginx Enter email address (used for urgent renewal and security notices) (Enter 'c' to cancel): After that, you need to agree to the terms of service: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Please read the Terms of Service at https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must agree in order to register with the ACME server at https://acme-v02.api.letsencrypt.org/directory - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - (A)gree/(C)ancel: a You may then optionally choose to share your email address with the Electronic Frontier Foundation (EFF) , the organization that develops Certbot. If you wish to not receive any email from the EFF, opting out here is a safe choice, no functionality will be lost. As we have not configured our nginx installation yet, Certbot will ask for the name of our server. Enter the appropriate information: No names were found in your configuration files. Please enter in your domain name(s) (comma and/or space separated) (Enter 'c' to cancel): m09vm14.ma.tum.de After getting and deploying the certificate, you may choose to switch the nginx configuration to https only. This is a safe choice, we would have to do it later anyways: Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you're confident your site works on HTTPS. You can undo this change by editing your web server's configuration. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2 Redirecting all traffic on port 80 to ssl in /etc/nginx/sites-enabled/default - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Congratulations! You have successfully enabled https://m09vm14.ma.tum.de You should test your configuration at: https://www.ssllabs.com/ssltest/analyze.html?d=m09vm14.ma.tum.de - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Finally, Certbot gives us some details on the location of our certificate and the expiration date. IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/m09vm14.ma.tum.de/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/m09vm14.ma.tum.de/privkey.pem Your cert will expire on 2019-07-16. To obtain a new or tweaked version of this certificate in the future, simply run Certbot again with the \"certonly\" option. To non-interactively renew *all* of your certificates, run \"certbot renew\" - Your account credentials have been saved in your Certbot configuration directory at /etc/letsencrypt. You should make a secure backup of this folder now. This configuration directory will also contain certificates and private keys obtained by Certbot so making regular backups of this folder is ideal. - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le Test the nginx Installation with HTTPS Let us give the https installation a quick test run: Enter the url http://m09vm14.ma.tum.de into your browser's address bar. (Note the http, no S.) You should immediately be redirected to the https version of the site (check the address bar!) and see the same generic greeting as before. Summary In this section, we installed Certbot on the server and ran Cerbot to obtain an SSL certificate. One gotcha to remember is that Port 80 must be open for Certbot to obtain the certificate. After we obtained our SSL certificate, we let Certbot handle the necessary nginx configuration. Finally, we made sure that we can now connect via https and that http connect are re-routed to https immediately. Next Steps The next step is to create a cookie secret, proxy auth token, and dhparem.pem file.","title":"SSL Certificates"},{"location":"ssl_certificates/#obtain-ssl-certificates","text":"Now that nginx is running on our JupyterHub server, we'll be able to obtain an SSL certificate and run JupyterHub over https. I followed the instructions on https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx to install Certbot , a program used to generate SSL certificates from Let's Encrypt . Obtain SSL Certificates Install Certbot Run Certbot Test the nginx Installation with HTTPS Summary Next Steps","title":"Obtain SSL Certificates"},{"location":"ssl_certificates/#install-certbot","text":"We'll use Certbot to obtain a standalone SSL certificate. Log onto the server with ssh in a terminal window. Certbot will need to communicate over the network, so before we run Certbot, we need to open up Port 80 using the ufw firewall utility (if you have not done so already). $ sudo ufw allow 80 First, we will install Certbot from the PPA maintained by Let's Encrypt: $ sudo apt update $ sudo apt install software-properties-common $ sudo add-apt-repository universe $ sudo add-apt-repository ppa:certbot/certbot $ sudo apt update $ sudo apt install certbot python-certbot-nginx","title":"Install Certbot"},{"location":"ssl_certificates/#run-certbot","text":"Next, we run Certbot to obtain a certificate and automatically change the nginx configuration to use that certificate: $ sudo certbot --nginx The script will ask you for your email address so that you may receive renewal and security notices: Saving debug log to /var/log/letsencrypt/letsencrypt.log Plugins selected: Authenticator nginx, Installer nginx Enter email address (used for urgent renewal and security notices) (Enter 'c' to cancel): After that, you need to agree to the terms of service: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Please read the Terms of Service at https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must agree in order to register with the ACME server at https://acme-v02.api.letsencrypt.org/directory - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - (A)gree/(C)ancel: a You may then optionally choose to share your email address with the Electronic Frontier Foundation (EFF) , the organization that develops Certbot. If you wish to not receive any email from the EFF, opting out here is a safe choice, no functionality will be lost. As we have not configured our nginx installation yet, Certbot will ask for the name of our server. Enter the appropriate information: No names were found in your configuration files. Please enter in your domain name(s) (comma and/or space separated) (Enter 'c' to cancel): m09vm14.ma.tum.de After getting and deploying the certificate, you may choose to switch the nginx configuration to https only. This is a safe choice, we would have to do it later anyways: Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you're confident your site works on HTTPS. You can undo this change by editing your web server's configuration. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2 Redirecting all traffic on port 80 to ssl in /etc/nginx/sites-enabled/default - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Congratulations! You have successfully enabled https://m09vm14.ma.tum.de You should test your configuration at: https://www.ssllabs.com/ssltest/analyze.html?d=m09vm14.ma.tum.de - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Finally, Certbot gives us some details on the location of our certificate and the expiration date. IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/m09vm14.ma.tum.de/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/m09vm14.ma.tum.de/privkey.pem Your cert will expire on 2019-07-16. To obtain a new or tweaked version of this certificate in the future, simply run Certbot again with the \"certonly\" option. To non-interactively renew *all* of your certificates, run \"certbot renew\" - Your account credentials have been saved in your Certbot configuration directory at /etc/letsencrypt. You should make a secure backup of this folder now. This configuration directory will also contain certificates and private keys obtained by Certbot so making regular backups of this folder is ideal. - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le","title":"Run Certbot"},{"location":"ssl_certificates/#test-the-nginx-installation-with-https","text":"Let us give the https installation a quick test run: Enter the url http://m09vm14.ma.tum.de into your browser's address bar. (Note the http, no S.) You should immediately be redirected to the https version of the site (check the address bar!) and see the same generic greeting as before.","title":"Test the nginx Installation with HTTPS"},{"location":"ssl_certificates/#summary","text":"In this section, we installed Certbot on the server and ran Cerbot to obtain an SSL certificate. One gotcha to remember is that Port 80 must be open for Certbot to obtain the certificate. After we obtained our SSL certificate, we let Certbot handle the necessary nginx configuration. Finally, we made sure that we can now connect via https and that http connect are re-routed to https immediately.","title":"Summary"},{"location":"ssl_certificates/#next-steps","text":"The next step is to create a cookie secret, proxy auth token, and dhparem.pem file.","title":"Next Steps"},{"location":"systemd/","text":"Run JupyterHub as a system service Running JupyerHub as a system service allows JupyterHub to run continuously even if we are not logged into the server. It also keeps JupyterHub running while when we log into the server and make any changes. Run JupyterHub as a system service Test local Authentication Summary Next Steps To run JupyterHub as a system service (according to this wiki ), we need to create a service file in the /etc/systemd/system directory. cd into the directory and have a look around. We see a couple files that end in .service . $ cd /etc/systemd/system $ ls cloud-init.target.wants network-online.target.wants dbus-org.freedesktop.thermald.service paths.target.wants default.target.wants sockets.target.wants final.target.wants sshd.service getty.target.wants sysinit.target.wants graphical.target.wants syslog.service iscsi.service timers.target.wants multi-user.target.wants Create a new .service file called jupyterhub.service pwd /etc/systemd/system $ sudo nano jupyterhub.service In the jupyterhub.service file, add the following. Note that as part of the PATH environment variable /srv/jupyterhub/venv/bin/ is included. This is the path to our virtual environment. As part of the ExecStart= section, we include a flag for our JupyterHub config file located at /etc/jupyterhub/jupyterhub_config.py . The example also includes a setting for GitLab that will only become relevant later. Feel free to not include that for now, especially if you do not plan on using GitLab for user authentication. [Unit] Description=JupyterHub After=syslog.target network.target [Service] User=root Environment=\"PATH=/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/srv/jupyterhub/venv/bin/:/opt/gurobi/linux64/bin\" Environment=\"GITLAB_HOST=https://gitlab.lrz.de\" ExecStart=/srv/jupyterhub/venv/bin/jupyterhub -f /etc/jupyterhub/jupyterhub_config.py [Install] WantedBy=multi-user.target Save and exit the nano text editor with [Ctrl]+[x] and [y] then [Enter]. Now we need to reload the system daemon. After the system daemon is reloaded, we can run JupyterHub as a system service using the command: sudo systemctl <start|stop|status> jupyterhub $ sudo systemctl daemon-reload $ sudo systemctl start jupyterhub We can see if JupyterHub is running with: $ sudo systemctl status jupyterhub Loaded: loaded (/etc/systemd/system/jupyterhub.service; Active: active (running) Test local Authentication Now we can point a web browser at our domain name and log into JupyterHub as our non-root user ritter and the password we set for ritter on the server. This time we are running with SSL security in place and even if we browse to http://m09vm14.ma.tum.de , Nginx will forward us to https://m09vm14.ma.tum.de . The JupyterHub login screen looks something like the screen capture below: A couple times I thought that JupyterHub was running after using systemctl start jupyterhub , but the JupyterHub wasn't working when I went to the server's web address. It turned out that JupyterHub wasn't running when I keyed in systemctl status jupyterhub . Most times looking for an error and tracking down the the error worked, but one time it seemed to be a problem with the http-configurable-proxy. The following command will shut down the proxy if you get stuck like I did (insert the number corresponding to the configurable-http-proxy process after the kill command): $ ps aux | grep configurable-http-proxy $ kill #### Summary In this section, we got JupyterHub running as a system service. We created a jupyterhub.service file in the /etc/systemd/system/ directory and made sure to include the PATH to our (jupyterhub) virtual environment and the path to our jupyterhub_config.py file. Finally, we reloaded the system service daemon and started the JupyterHub service. Then be opened a web browser and keyed in our domain name and logged into JupyterHub. Next Steps The next step is to add users to our server and see if we can log in as a different user than our non-root sudo user, ritter .","title":"System Service"},{"location":"systemd/#run-jupyterhub-as-a-system-service","text":"Running JupyerHub as a system service allows JupyterHub to run continuously even if we are not logged into the server. It also keeps JupyterHub running while when we log into the server and make any changes. Run JupyterHub as a system service Test local Authentication Summary Next Steps To run JupyterHub as a system service (according to this wiki ), we need to create a service file in the /etc/systemd/system directory. cd into the directory and have a look around. We see a couple files that end in .service . $ cd /etc/systemd/system $ ls cloud-init.target.wants network-online.target.wants dbus-org.freedesktop.thermald.service paths.target.wants default.target.wants sockets.target.wants final.target.wants sshd.service getty.target.wants sysinit.target.wants graphical.target.wants syslog.service iscsi.service timers.target.wants multi-user.target.wants Create a new .service file called jupyterhub.service pwd /etc/systemd/system $ sudo nano jupyterhub.service In the jupyterhub.service file, add the following. Note that as part of the PATH environment variable /srv/jupyterhub/venv/bin/ is included. This is the path to our virtual environment. As part of the ExecStart= section, we include a flag for our JupyterHub config file located at /etc/jupyterhub/jupyterhub_config.py . The example also includes a setting for GitLab that will only become relevant later. Feel free to not include that for now, especially if you do not plan on using GitLab for user authentication. [Unit] Description=JupyterHub After=syslog.target network.target [Service] User=root Environment=\"PATH=/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/srv/jupyterhub/venv/bin/:/opt/gurobi/linux64/bin\" Environment=\"GITLAB_HOST=https://gitlab.lrz.de\" ExecStart=/srv/jupyterhub/venv/bin/jupyterhub -f /etc/jupyterhub/jupyterhub_config.py [Install] WantedBy=multi-user.target Save and exit the nano text editor with [Ctrl]+[x] and [y] then [Enter]. Now we need to reload the system daemon. After the system daemon is reloaded, we can run JupyterHub as a system service using the command: sudo systemctl <start|stop|status> jupyterhub $ sudo systemctl daemon-reload $ sudo systemctl start jupyterhub We can see if JupyterHub is running with: $ sudo systemctl status jupyterhub Loaded: loaded (/etc/systemd/system/jupyterhub.service; Active: active (running)","title":"Run JupyterHub as a system service"},{"location":"systemd/#test-local-authentication","text":"Now we can point a web browser at our domain name and log into JupyterHub as our non-root user ritter and the password we set for ritter on the server. This time we are running with SSL security in place and even if we browse to http://m09vm14.ma.tum.de , Nginx will forward us to https://m09vm14.ma.tum.de . The JupyterHub login screen looks something like the screen capture below: A couple times I thought that JupyterHub was running after using systemctl start jupyterhub , but the JupyterHub wasn't working when I went to the server's web address. It turned out that JupyterHub wasn't running when I keyed in systemctl status jupyterhub . Most times looking for an error and tracking down the the error worked, but one time it seemed to be a problem with the http-configurable-proxy. The following command will shut down the proxy if you get stuck like I did (insert the number corresponding to the configurable-http-proxy process after the kill command): $ ps aux | grep configurable-http-proxy $ kill ####","title":"Test local Authentication"},{"location":"systemd/#summary","text":"In this section, we got JupyterHub running as a system service. We created a jupyterhub.service file in the /etc/systemd/system/ directory and made sure to include the PATH to our (jupyterhub) virtual environment and the path to our jupyterhub_config.py file. Finally, we reloaded the system service daemon and started the JupyterHub service. Then be opened a web browser and keyed in our domain name and logged into JupyterHub.","title":"Summary"},{"location":"systemd/#next-steps","text":"The next step is to add users to our server and see if we can log in as a different user than our non-root sudo user, ritter .","title":"Next Steps"},{"location":"useful_commands/","text":"Useful Commands Below are some useful commands for setting up and running JupyterHub. kill configurable-http-proxy ps aux | grep configurable-http-proxy kill #### nginx sudo service nginx stop sudo service nginx start sudo service nginx restart nginx -t Shutdown and restart server sudo shutdown -r now Start JupyterHub with sudo (need to do this to allow other users to logon) sudo /home/peter/anaconda3/bin/jupyterhub Start jupyterhub as service, will run continuously sudo systemctl start jupyterhub sudo systemctl <start|stop|status> jupyterhub Add environmental variables: $ export OAUTH_CLIENT_SECRET=xxxxxxxxxxx Get the time and date from the command line $ date \"+%H:%M:%S %Y-%m-%d\" 17:36:58 2019-02-13 Gitpuller extension URLs https://domain.org/hub/user-redirect/git-pull?repo=GitHubUserName%2FRepoName&branch=master&app=lab change the systemctl start jupyterhub configurations If changes are made to /etc/systemd/system/jupyterhub.service needs to reload: sudo systemctl daemon-reload sudo systemctl start jupyterhub","title":"Useful Commands"},{"location":"useful_commands/#useful-commands","text":"Below are some useful commands for setting up and running JupyterHub.","title":"Useful Commands"},{"location":"useful_commands/#kill-configurable-http-proxy","text":"ps aux | grep configurable-http-proxy kill ####","title":"kill configurable-http-proxy"},{"location":"useful_commands/#nginx","text":"sudo service nginx stop sudo service nginx start sudo service nginx restart nginx -t","title":"nginx"},{"location":"useful_commands/#shutdown-and-restart-server","text":"sudo shutdown -r now","title":"Shutdown and restart server"},{"location":"useful_commands/#start-jupyterhub-with-sudo-need-to-do-this-to-allow-other-users-to-logon","text":"sudo /home/peter/anaconda3/bin/jupyterhub","title":"Start JupyterHub with sudo (need to do this to allow other users to logon)"},{"location":"useful_commands/#start-jupyterhub-as-service-will-run-continuously","text":"sudo systemctl start jupyterhub sudo systemctl <start|stop|status> jupyterhub","title":"Start jupyterhub as service, will run continuously"},{"location":"useful_commands/#add-environmental-variables","text":"$ export OAUTH_CLIENT_SECRET=xxxxxxxxxxx","title":"Add environmental variables:"},{"location":"useful_commands/#get-the-time-and-date-from-the-command-line","text":"$ date \"+%H:%M:%S %Y-%m-%d\" 17:36:58 2019-02-13","title":"Get the time and date from the command line"},{"location":"useful_commands/#gitpuller-extension-urls","text":"https://domain.org/hub/user-redirect/git-pull?repo=GitHubUserName%2FRepoName&branch=master&app=lab","title":"Gitpuller extension URLs"},{"location":"useful_commands/#change-the-systemctl-start-jupyterhub-configurations","text":"If changes are made to /etc/systemd/system/jupyterhub.service needs to reload: sudo systemctl daemon-reload sudo systemctl start jupyterhub","title":"change the systemctl start jupyterhub configurations"},{"location":"what_is_jupyterhub/","text":"What is JupyterHub? JupyterHub is a server-hosted distributed Jupyter notebook environment. JupyterHub allows users to log into a server and write Python code within a web browswer without any software installation on their local computer. Anywhere you have an internet connection, you can bring up a JupyterHub webpage and write/run Python code in a Jupyter notebook. The Jupyter notebook and JupyterLab interfaces that JupyterHub provides is the same Jupyter interface you run locally. Because JupyterHub runs in a web browser, it even works on tablets and phones. Below is an image of a running JupyterHub server. The JupyterLab interface is shown. Why JupyterHub? Why Jupyter Hub ? I am teaching a course on combinatorial optimization this summer. I plan to use Python in class and in a few coding sessions to help students really grasp the algorithmic concepts that we will be covering in this class. If we use Python in the class, I would like to spend the class time coding and solving problems. I don't want to spend time during class downloading Python, creating virtual environments, troubleshooting installs, dealing with system vs. non-system versions of Python, installing packages, dealing with folder structure, explaining the difference between conda and pip, teaching command-line commands, going over Python on Windows compared to Python on MacOSX... The solution is to use JupyterHub. Summary JupyterHub is a way to run Jupyter notebooks on a remote server. Students can log on to a JupyterHub server then write and run Python code without installing any software. Students see the same interface on JupyterHub as they see running Jupyter notebooks locally. Next Steps Next, we'll review the tools used on our local computer to deploy JupterHub. I am going to assume you are using a Unix style system (typically Linux or macOS). For configuration on a windows system, please have a look at the original documentation by Peter D. Kazarinoff. We'll also review the standard locations for JupyterHub configuration and runtime files.","title":"What is JupyterHub?"},{"location":"what_is_jupyterhub/#what-is-jupyterhub","text":"JupyterHub is a server-hosted distributed Jupyter notebook environment. JupyterHub allows users to log into a server and write Python code within a web browswer without any software installation on their local computer. Anywhere you have an internet connection, you can bring up a JupyterHub webpage and write/run Python code in a Jupyter notebook. The Jupyter notebook and JupyterLab interfaces that JupyterHub provides is the same Jupyter interface you run locally. Because JupyterHub runs in a web browser, it even works on tablets and phones. Below is an image of a running JupyterHub server. The JupyterLab interface is shown.","title":"What is JupyterHub?"},{"location":"what_is_jupyterhub/#why-jupyterhub","text":"Why Jupyter Hub ? I am teaching a course on combinatorial optimization this summer. I plan to use Python in class and in a few coding sessions to help students really grasp the algorithmic concepts that we will be covering in this class. If we use Python in the class, I would like to spend the class time coding and solving problems. I don't want to spend time during class downloading Python, creating virtual environments, troubleshooting installs, dealing with system vs. non-system versions of Python, installing packages, dealing with folder structure, explaining the difference between conda and pip, teaching command-line commands, going over Python on Windows compared to Python on MacOSX... The solution is to use JupyterHub.","title":"Why JupyterHub?"},{"location":"what_is_jupyterhub/#summary","text":"JupyterHub is a way to run Jupyter notebooks on a remote server. Students can log on to a JupyterHub server then write and run Python code without installing any software. Students see the same interface on JupyterHub as they see running Jupyter notebooks locally.","title":"Summary"},{"location":"what_is_jupyterhub/#next-steps","text":"Next, we'll review the tools used on our local computer to deploy JupterHub. I am going to assume you are using a Unix style system (typically Linux or macOS). For configuration on a windows system, please have a look at the original documentation by Peter D. Kazarinoff. We'll also review the standard locations for JupyterHub configuration and runtime files.","title":"Next Steps"}]}